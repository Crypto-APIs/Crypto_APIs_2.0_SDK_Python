# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.  # noqa: E501

    The version of the OpenAPI document: 2021-03-20
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from cryptoapis.models.list_unconfirmed_transactions_by_address_ri_recipients_inner import ListUnconfirmedTransactionsByAddressRIRecipientsInner
from cryptoapis.models.list_unconfirmed_transactions_by_address_ri_senders_inner import ListUnconfirmedTransactionsByAddressRISendersInner
from cryptoapis.models.list_unconfirmed_transactions_by_address_ribs import ListUnconfirmedTransactionsByAddressRIBS

class ListUnconfirmedTransactionsByAddressRI(BaseModel):
    """
    ListUnconfirmedTransactionsByAddressRI
    """
    recipients: conlist(ListUnconfirmedTransactionsByAddressRIRecipientsInner) = Field(..., description="Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.")
    senders: conlist(ListUnconfirmedTransactionsByAddressRISendersInner) = Field(..., description="Represents a list of sender addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.")
    timestamp: StrictInt = Field(..., description="Defines the exact date/time in Unix Timestamp when this transaction was mined, confirmed or first seen in Mempool, if it is unconfirmed.")
    transaction_hash: StrictStr = Field(..., alias="transactionHash", description="Represents the same as `transactionId` for account-based protocols like Ethereum, while it could be different in UTXO-based protocols like Bitcoin. E.g., in UTXO-based protocols `hash` is different from `transactionId` for SegWit transactions.")
    transaction_id: StrictStr = Field(..., alias="transactionId", description="Represents the unique identifier of a transaction, i.e. it could be `transactionId` in UTXO-based protocols like Bitcoin, and transaction `hash` in Ethereum blockchain.")
    blockchain_specific: ListUnconfirmedTransactionsByAddressRIBS = Field(..., alias="blockchainSpecific")
    __properties = ["recipients", "senders", "timestamp", "transactionHash", "transactionId", "blockchainSpecific"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ListUnconfirmedTransactionsByAddressRI:
        """Create an instance of ListUnconfirmedTransactionsByAddressRI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in recipients (list)
        _items = []
        if self.recipients:
            for _item in self.recipients:
                if _item:
                    _items.append(_item.to_dict())
            _dict['recipients'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in senders (list)
        _items = []
        if self.senders:
            for _item in self.senders:
                if _item:
                    _items.append(_item.to_dict())
            _dict['senders'] = _items
        # override the default output from pydantic by calling `to_dict()` of blockchain_specific
        if self.blockchain_specific:
            _dict['blockchainSpecific'] = self.blockchain_specific.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListUnconfirmedTransactionsByAddressRI:
        """Create an instance of ListUnconfirmedTransactionsByAddressRI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ListUnconfirmedTransactionsByAddressRI.parse_obj(obj)

        _obj = ListUnconfirmedTransactionsByAddressRI.parse_obj({
            "recipients": [ListUnconfirmedTransactionsByAddressRIRecipientsInner.from_dict(_item) for _item in obj.get("recipients")] if obj.get("recipients") is not None else None,
            "senders": [ListUnconfirmedTransactionsByAddressRISendersInner.from_dict(_item) for _item in obj.get("senders")] if obj.get("senders") is not None else None,
            "timestamp": obj.get("timestamp"),
            "transaction_hash": obj.get("transactionHash"),
            "transaction_id": obj.get("transactionId"),
            "blockchain_specific": ListUnconfirmedTransactionsByAddressRIBS.from_dict(obj.get("blockchainSpecific")) if obj.get("blockchainSpecific") is not None else None
        })
        return _obj

