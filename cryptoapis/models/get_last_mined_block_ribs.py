# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.  # noqa: E501

    The version of the OpenAPI document: 2021-03-20
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from cryptoapis.models.get_last_mined_block_ribsb import GetLastMinedBlockRIBSB
from cryptoapis.models.get_last_mined_block_ribsbc import GetLastMinedBlockRIBSBC
from cryptoapis.models.get_last_mined_block_ribsbsc import GetLastMinedBlockRIBSBSC
from cryptoapis.models.get_last_mined_block_ribsd import GetLastMinedBlockRIBSD
from cryptoapis.models.get_last_mined_block_ribsd2 import GetLastMinedBlockRIBSD2
from cryptoapis.models.get_last_mined_block_ribse import GetLastMinedBlockRIBSE
from cryptoapis.models.get_last_mined_block_ribsec import GetLastMinedBlockRIBSEC
from cryptoapis.models.get_last_mined_block_ribsl import GetLastMinedBlockRIBSL
from cryptoapis.models.get_last_mined_block_ribsz import GetLastMinedBlockRIBSZ
from typing import Any, List
from pydantic import StrictStr, Field

GETLASTMINEDBLOCKRIBS_ONE_OF_SCHEMAS = ["GetLastMinedBlockRIBSB", "GetLastMinedBlockRIBSBC", "GetLastMinedBlockRIBSBSC", "GetLastMinedBlockRIBSD", "GetLastMinedBlockRIBSD2", "GetLastMinedBlockRIBSE", "GetLastMinedBlockRIBSEC", "GetLastMinedBlockRIBSL", "GetLastMinedBlockRIBSZ"]

class GetLastMinedBlockRIBS(BaseModel):
    """
    GetLastMinedBlockRIBS
    """
    # data type: GetLastMinedBlockRIBSB
    oneof_schema_1_validator: Optional[GetLastMinedBlockRIBSB] = None
    # data type: GetLastMinedBlockRIBSE
    oneof_schema_2_validator: Optional[GetLastMinedBlockRIBSE] = None
    # data type: GetLastMinedBlockRIBSEC
    oneof_schema_3_validator: Optional[GetLastMinedBlockRIBSEC] = None
    # data type: GetLastMinedBlockRIBSBC
    oneof_schema_4_validator: Optional[GetLastMinedBlockRIBSBC] = None
    # data type: GetLastMinedBlockRIBSL
    oneof_schema_5_validator: Optional[GetLastMinedBlockRIBSL] = None
    # data type: GetLastMinedBlockRIBSD
    oneof_schema_6_validator: Optional[GetLastMinedBlockRIBSD] = None
    # data type: GetLastMinedBlockRIBSD2
    oneof_schema_7_validator: Optional[GetLastMinedBlockRIBSD2] = None
    # data type: GetLastMinedBlockRIBSBSC
    oneof_schema_8_validator: Optional[GetLastMinedBlockRIBSBSC] = None
    # data type: GetLastMinedBlockRIBSZ
    oneof_schema_9_validator: Optional[GetLastMinedBlockRIBSZ] = None
    actual_instance: Any
    one_of_schemas: List[str] = Field(GETLASTMINEDBLOCKRIBS_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = GetLastMinedBlockRIBS.construct()
        error_messages = []
        match = 0
        # validate data type: GetLastMinedBlockRIBSB
        if not isinstance(v, GetLastMinedBlockRIBSB):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLastMinedBlockRIBSB`")
        else:
            match += 1
        # validate data type: GetLastMinedBlockRIBSE
        if not isinstance(v, GetLastMinedBlockRIBSE):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLastMinedBlockRIBSE`")
        else:
            match += 1
        # validate data type: GetLastMinedBlockRIBSEC
        if not isinstance(v, GetLastMinedBlockRIBSEC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLastMinedBlockRIBSEC`")
        else:
            match += 1
        # validate data type: GetLastMinedBlockRIBSBC
        if not isinstance(v, GetLastMinedBlockRIBSBC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLastMinedBlockRIBSBC`")
        else:
            match += 1
        # validate data type: GetLastMinedBlockRIBSL
        if not isinstance(v, GetLastMinedBlockRIBSL):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLastMinedBlockRIBSL`")
        else:
            match += 1
        # validate data type: GetLastMinedBlockRIBSD
        if not isinstance(v, GetLastMinedBlockRIBSD):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLastMinedBlockRIBSD`")
        else:
            match += 1
        # validate data type: GetLastMinedBlockRIBSD2
        if not isinstance(v, GetLastMinedBlockRIBSD2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLastMinedBlockRIBSD2`")
        else:
            match += 1
        # validate data type: GetLastMinedBlockRIBSBSC
        if not isinstance(v, GetLastMinedBlockRIBSBSC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLastMinedBlockRIBSBSC`")
        else:
            match += 1
        # validate data type: GetLastMinedBlockRIBSZ
        if not isinstance(v, GetLastMinedBlockRIBSZ):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetLastMinedBlockRIBSZ`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in GetLastMinedBlockRIBS with oneOf schemas: GetLastMinedBlockRIBSB, GetLastMinedBlockRIBSBC, GetLastMinedBlockRIBSBSC, GetLastMinedBlockRIBSD, GetLastMinedBlockRIBSD2, GetLastMinedBlockRIBSE, GetLastMinedBlockRIBSEC, GetLastMinedBlockRIBSL, GetLastMinedBlockRIBSZ. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in GetLastMinedBlockRIBS with oneOf schemas: GetLastMinedBlockRIBSB, GetLastMinedBlockRIBSBC, GetLastMinedBlockRIBSBSC, GetLastMinedBlockRIBSD, GetLastMinedBlockRIBSD2, GetLastMinedBlockRIBSE, GetLastMinedBlockRIBSEC, GetLastMinedBlockRIBSL, GetLastMinedBlockRIBSZ. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> GetLastMinedBlockRIBS:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> GetLastMinedBlockRIBS:
        """Returns the object represented by the json string"""
        instance = GetLastMinedBlockRIBS.construct()
        error_messages = []
        match = 0

        # deserialize data into GetLastMinedBlockRIBSB
        try:
            instance.actual_instance = GetLastMinedBlockRIBSB.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLastMinedBlockRIBSE
        try:
            instance.actual_instance = GetLastMinedBlockRIBSE.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLastMinedBlockRIBSEC
        try:
            instance.actual_instance = GetLastMinedBlockRIBSEC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLastMinedBlockRIBSBC
        try:
            instance.actual_instance = GetLastMinedBlockRIBSBC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLastMinedBlockRIBSL
        try:
            instance.actual_instance = GetLastMinedBlockRIBSL.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLastMinedBlockRIBSD
        try:
            instance.actual_instance = GetLastMinedBlockRIBSD.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLastMinedBlockRIBSD2
        try:
            instance.actual_instance = GetLastMinedBlockRIBSD2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLastMinedBlockRIBSBSC
        try:
            instance.actual_instance = GetLastMinedBlockRIBSBSC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetLastMinedBlockRIBSZ
        try:
            instance.actual_instance = GetLastMinedBlockRIBSZ.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into GetLastMinedBlockRIBS with oneOf schemas: GetLastMinedBlockRIBSB, GetLastMinedBlockRIBSBC, GetLastMinedBlockRIBSBSC, GetLastMinedBlockRIBSD, GetLastMinedBlockRIBSD2, GetLastMinedBlockRIBSE, GetLastMinedBlockRIBSEC, GetLastMinedBlockRIBSL, GetLastMinedBlockRIBSZ. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into GetLastMinedBlockRIBS with oneOf schemas: GetLastMinedBlockRIBSB, GetLastMinedBlockRIBSBC, GetLastMinedBlockRIBSBSC, GetLastMinedBlockRIBSD, GetLastMinedBlockRIBSD2, GetLastMinedBlockRIBSE, GetLastMinedBlockRIBSEC, GetLastMinedBlockRIBSL, GetLastMinedBlockRIBSZ. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

