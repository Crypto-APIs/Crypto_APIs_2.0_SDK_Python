# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.  # noqa: E501

    The version of the OpenAPI document: 2021-03-20
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from cryptoapis.models.list_confirmed_transactions_by_address_and_time_range_ribsb import ListConfirmedTransactionsByAddressAndTimeRangeRIBSB
from cryptoapis.models.list_confirmed_transactions_by_address_and_time_range_ribsbc import ListConfirmedTransactionsByAddressAndTimeRangeRIBSBC
from cryptoapis.models.list_confirmed_transactions_by_address_and_time_range_ribsbsc import ListConfirmedTransactionsByAddressAndTimeRangeRIBSBSC
from cryptoapis.models.list_confirmed_transactions_by_address_and_time_range_ribsd import ListConfirmedTransactionsByAddressAndTimeRangeRIBSD
from cryptoapis.models.list_confirmed_transactions_by_address_and_time_range_ribsd2 import ListConfirmedTransactionsByAddressAndTimeRangeRIBSD2
from cryptoapis.models.list_confirmed_transactions_by_address_and_time_range_ribse import ListConfirmedTransactionsByAddressAndTimeRangeRIBSE
from cryptoapis.models.list_confirmed_transactions_by_address_and_time_range_ribsec import ListConfirmedTransactionsByAddressAndTimeRangeRIBSEC
from cryptoapis.models.list_confirmed_transactions_by_address_and_time_range_ribsl import ListConfirmedTransactionsByAddressAndTimeRangeRIBSL
from cryptoapis.models.list_confirmed_transactions_by_address_and_time_range_ribsz import ListConfirmedTransactionsByAddressAndTimeRangeRIBSZ
from typing import Any, List
from pydantic import StrictStr, Field

LISTCONFIRMEDTRANSACTIONSBYADDRESSANDTIMERANGERIBS_ONE_OF_SCHEMAS = ["ListConfirmedTransactionsByAddressAndTimeRangeRIBSB", "ListConfirmedTransactionsByAddressAndTimeRangeRIBSBC", "ListConfirmedTransactionsByAddressAndTimeRangeRIBSBSC", "ListConfirmedTransactionsByAddressAndTimeRangeRIBSD", "ListConfirmedTransactionsByAddressAndTimeRangeRIBSD2", "ListConfirmedTransactionsByAddressAndTimeRangeRIBSE", "ListConfirmedTransactionsByAddressAndTimeRangeRIBSEC", "ListConfirmedTransactionsByAddressAndTimeRangeRIBSL", "ListConfirmedTransactionsByAddressAndTimeRangeRIBSZ"]

class ListConfirmedTransactionsByAddressAndTimeRangeRIBS(BaseModel):
    """
    ListConfirmedTransactionsByAddressAndTimeRangeRIBS
    """
    # data type: ListConfirmedTransactionsByAddressAndTimeRangeRIBSB
    oneof_schema_1_validator: Optional[ListConfirmedTransactionsByAddressAndTimeRangeRIBSB] = None
    # data type: ListConfirmedTransactionsByAddressAndTimeRangeRIBSBC
    oneof_schema_2_validator: Optional[ListConfirmedTransactionsByAddressAndTimeRangeRIBSBC] = None
    # data type: ListConfirmedTransactionsByAddressAndTimeRangeRIBSL
    oneof_schema_3_validator: Optional[ListConfirmedTransactionsByAddressAndTimeRangeRIBSL] = None
    # data type: ListConfirmedTransactionsByAddressAndTimeRangeRIBSD
    oneof_schema_4_validator: Optional[ListConfirmedTransactionsByAddressAndTimeRangeRIBSD] = None
    # data type: ListConfirmedTransactionsByAddressAndTimeRangeRIBSD2
    oneof_schema_5_validator: Optional[ListConfirmedTransactionsByAddressAndTimeRangeRIBSD2] = None
    # data type: ListConfirmedTransactionsByAddressAndTimeRangeRIBSEC
    oneof_schema_6_validator: Optional[ListConfirmedTransactionsByAddressAndTimeRangeRIBSEC] = None
    # data type: ListConfirmedTransactionsByAddressAndTimeRangeRIBSE
    oneof_schema_7_validator: Optional[ListConfirmedTransactionsByAddressAndTimeRangeRIBSE] = None
    # data type: ListConfirmedTransactionsByAddressAndTimeRangeRIBSBSC
    oneof_schema_8_validator: Optional[ListConfirmedTransactionsByAddressAndTimeRangeRIBSBSC] = None
    # data type: ListConfirmedTransactionsByAddressAndTimeRangeRIBSZ
    oneof_schema_9_validator: Optional[ListConfirmedTransactionsByAddressAndTimeRangeRIBSZ] = None
    actual_instance: Any
    one_of_schemas: List[str] = Field(LISTCONFIRMEDTRANSACTIONSBYADDRESSANDTIMERANGERIBS_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ListConfirmedTransactionsByAddressAndTimeRangeRIBS.construct()
        error_messages = []
        match = 0
        # validate data type: ListConfirmedTransactionsByAddressAndTimeRangeRIBSB
        if not isinstance(v, ListConfirmedTransactionsByAddressAndTimeRangeRIBSB):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListConfirmedTransactionsByAddressAndTimeRangeRIBSB`")
        else:
            match += 1
        # validate data type: ListConfirmedTransactionsByAddressAndTimeRangeRIBSBC
        if not isinstance(v, ListConfirmedTransactionsByAddressAndTimeRangeRIBSBC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListConfirmedTransactionsByAddressAndTimeRangeRIBSBC`")
        else:
            match += 1
        # validate data type: ListConfirmedTransactionsByAddressAndTimeRangeRIBSL
        if not isinstance(v, ListConfirmedTransactionsByAddressAndTimeRangeRIBSL):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListConfirmedTransactionsByAddressAndTimeRangeRIBSL`")
        else:
            match += 1
        # validate data type: ListConfirmedTransactionsByAddressAndTimeRangeRIBSD
        if not isinstance(v, ListConfirmedTransactionsByAddressAndTimeRangeRIBSD):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListConfirmedTransactionsByAddressAndTimeRangeRIBSD`")
        else:
            match += 1
        # validate data type: ListConfirmedTransactionsByAddressAndTimeRangeRIBSD2
        if not isinstance(v, ListConfirmedTransactionsByAddressAndTimeRangeRIBSD2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListConfirmedTransactionsByAddressAndTimeRangeRIBSD2`")
        else:
            match += 1
        # validate data type: ListConfirmedTransactionsByAddressAndTimeRangeRIBSEC
        if not isinstance(v, ListConfirmedTransactionsByAddressAndTimeRangeRIBSEC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListConfirmedTransactionsByAddressAndTimeRangeRIBSEC`")
        else:
            match += 1
        # validate data type: ListConfirmedTransactionsByAddressAndTimeRangeRIBSE
        if not isinstance(v, ListConfirmedTransactionsByAddressAndTimeRangeRIBSE):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListConfirmedTransactionsByAddressAndTimeRangeRIBSE`")
        else:
            match += 1
        # validate data type: ListConfirmedTransactionsByAddressAndTimeRangeRIBSBSC
        if not isinstance(v, ListConfirmedTransactionsByAddressAndTimeRangeRIBSBSC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListConfirmedTransactionsByAddressAndTimeRangeRIBSBSC`")
        else:
            match += 1
        # validate data type: ListConfirmedTransactionsByAddressAndTimeRangeRIBSZ
        if not isinstance(v, ListConfirmedTransactionsByAddressAndTimeRangeRIBSZ):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListConfirmedTransactionsByAddressAndTimeRangeRIBSZ`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ListConfirmedTransactionsByAddressAndTimeRangeRIBS with oneOf schemas: ListConfirmedTransactionsByAddressAndTimeRangeRIBSB, ListConfirmedTransactionsByAddressAndTimeRangeRIBSBC, ListConfirmedTransactionsByAddressAndTimeRangeRIBSBSC, ListConfirmedTransactionsByAddressAndTimeRangeRIBSD, ListConfirmedTransactionsByAddressAndTimeRangeRIBSD2, ListConfirmedTransactionsByAddressAndTimeRangeRIBSE, ListConfirmedTransactionsByAddressAndTimeRangeRIBSEC, ListConfirmedTransactionsByAddressAndTimeRangeRIBSL, ListConfirmedTransactionsByAddressAndTimeRangeRIBSZ. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ListConfirmedTransactionsByAddressAndTimeRangeRIBS with oneOf schemas: ListConfirmedTransactionsByAddressAndTimeRangeRIBSB, ListConfirmedTransactionsByAddressAndTimeRangeRIBSBC, ListConfirmedTransactionsByAddressAndTimeRangeRIBSBSC, ListConfirmedTransactionsByAddressAndTimeRangeRIBSD, ListConfirmedTransactionsByAddressAndTimeRangeRIBSD2, ListConfirmedTransactionsByAddressAndTimeRangeRIBSE, ListConfirmedTransactionsByAddressAndTimeRangeRIBSEC, ListConfirmedTransactionsByAddressAndTimeRangeRIBSL, ListConfirmedTransactionsByAddressAndTimeRangeRIBSZ. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> ListConfirmedTransactionsByAddressAndTimeRangeRIBS:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> ListConfirmedTransactionsByAddressAndTimeRangeRIBS:
        """Returns the object represented by the json string"""
        instance = ListConfirmedTransactionsByAddressAndTimeRangeRIBS.construct()
        error_messages = []
        match = 0

        # deserialize data into ListConfirmedTransactionsByAddressAndTimeRangeRIBSB
        try:
            instance.actual_instance = ListConfirmedTransactionsByAddressAndTimeRangeRIBSB.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListConfirmedTransactionsByAddressAndTimeRangeRIBSBC
        try:
            instance.actual_instance = ListConfirmedTransactionsByAddressAndTimeRangeRIBSBC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListConfirmedTransactionsByAddressAndTimeRangeRIBSL
        try:
            instance.actual_instance = ListConfirmedTransactionsByAddressAndTimeRangeRIBSL.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListConfirmedTransactionsByAddressAndTimeRangeRIBSD
        try:
            instance.actual_instance = ListConfirmedTransactionsByAddressAndTimeRangeRIBSD.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListConfirmedTransactionsByAddressAndTimeRangeRIBSD2
        try:
            instance.actual_instance = ListConfirmedTransactionsByAddressAndTimeRangeRIBSD2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListConfirmedTransactionsByAddressAndTimeRangeRIBSEC
        try:
            instance.actual_instance = ListConfirmedTransactionsByAddressAndTimeRangeRIBSEC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListConfirmedTransactionsByAddressAndTimeRangeRIBSE
        try:
            instance.actual_instance = ListConfirmedTransactionsByAddressAndTimeRangeRIBSE.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListConfirmedTransactionsByAddressAndTimeRangeRIBSBSC
        try:
            instance.actual_instance = ListConfirmedTransactionsByAddressAndTimeRangeRIBSBSC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListConfirmedTransactionsByAddressAndTimeRangeRIBSZ
        try:
            instance.actual_instance = ListConfirmedTransactionsByAddressAndTimeRangeRIBSZ.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ListConfirmedTransactionsByAddressAndTimeRangeRIBS with oneOf schemas: ListConfirmedTransactionsByAddressAndTimeRangeRIBSB, ListConfirmedTransactionsByAddressAndTimeRangeRIBSBC, ListConfirmedTransactionsByAddressAndTimeRangeRIBSBSC, ListConfirmedTransactionsByAddressAndTimeRangeRIBSD, ListConfirmedTransactionsByAddressAndTimeRangeRIBSD2, ListConfirmedTransactionsByAddressAndTimeRangeRIBSE, ListConfirmedTransactionsByAddressAndTimeRangeRIBSEC, ListConfirmedTransactionsByAddressAndTimeRangeRIBSL, ListConfirmedTransactionsByAddressAndTimeRangeRIBSZ. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ListConfirmedTransactionsByAddressAndTimeRangeRIBS with oneOf schemas: ListConfirmedTransactionsByAddressAndTimeRangeRIBSB, ListConfirmedTransactionsByAddressAndTimeRangeRIBSBC, ListConfirmedTransactionsByAddressAndTimeRangeRIBSBSC, ListConfirmedTransactionsByAddressAndTimeRangeRIBSD, ListConfirmedTransactionsByAddressAndTimeRangeRIBSD2, ListConfirmedTransactionsByAddressAndTimeRangeRIBSE, ListConfirmedTransactionsByAddressAndTimeRangeRIBSEC, ListConfirmedTransactionsByAddressAndTimeRangeRIBSL, ListConfirmedTransactionsByAddressAndTimeRangeRIBSZ. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

