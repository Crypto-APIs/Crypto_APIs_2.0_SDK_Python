# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.  # noqa: E501

    The version of the OpenAPI document: 2021-03-20
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr

class ListInternalTransactionsByAddressRI(BaseModel):
    """
    ListInternalTransactionsByAddressRI
    """
    amount: StrictStr = Field(..., description="Defines the specific amount of the transaction.")
    mined_in_block_hash: StrictStr = Field(..., alias="minedInBlockHash", description="Represents the hash of the block where this transaction was mined/confirmed for first time. The hash is defined as a cryptographic digital fingerprint made by hashing the block header twice through the SHA256 algorithm.")
    mined_in_block_height: StrictInt = Field(..., alias="minedInBlockHeight", description="Represents the hight of the block where this transaction was mined/confirmed for first time. The height is defined as the number of blocks in the blockchain preceding this specific block.")
    operation_id: StrictStr = Field(..., alias="operationID", description="Represents the unique internal transaction ID in regards to the parent transaction (type trace address).")
    operation_type: StrictStr = Field(..., alias="operationType", description="Defines the call type of the internal transaction.")
    parent_hash: StrictStr = Field(..., alias="parentHash", description="Defines the specific hash of the parent transaction.")
    recipient: StrictStr = Field(..., description="Represents the recipient address with the respective amount.")
    sender: StrictStr = Field(..., description="Represents the sender address with the respective amount.")
    timestamp: StrictInt = Field(...)
    __properties = ["amount", "minedInBlockHash", "minedInBlockHeight", "operationID", "operationType", "parentHash", "recipient", "sender", "timestamp"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ListInternalTransactionsByAddressRI:
        """Create an instance of ListInternalTransactionsByAddressRI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListInternalTransactionsByAddressRI:
        """Create an instance of ListInternalTransactionsByAddressRI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ListInternalTransactionsByAddressRI.parse_obj(obj)

        _obj = ListInternalTransactionsByAddressRI.parse_obj({
            "amount": obj.get("amount"),
            "mined_in_block_hash": obj.get("minedInBlockHash"),
            "mined_in_block_height": obj.get("minedInBlockHeight"),
            "operation_id": obj.get("operationID"),
            "operation_type": obj.get("operationType"),
            "parent_hash": obj.get("parentHash"),
            "recipient": obj.get("recipient"),
            "sender": obj.get("sender"),
            "timestamp": obj.get("timestamp")
        })
        return _obj

