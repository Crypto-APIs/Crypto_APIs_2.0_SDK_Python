# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.  # noqa: E501

    The version of the OpenAPI document: 2021-03-20
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist

class ListTransactionsByBlockHashRIBSZVJoinSplitInner(BaseModel):
    """
    ListTransactionsByBlockHashRIBSZVJoinSplitInner
    """
    anchor: StrictStr = Field(..., description="Defines a Merkle tree root of a note commitment tree which uniquely identifies a note commitment tree state given the assumed security properties of the Merkle treeâ€™s  hash function.")
    cipher_texts: conlist(StrictStr) = Field(..., alias="cipherTexts")
    commitments: conlist(StrictStr) = Field(...)
    macs: conlist(StrictStr) = Field(...)
    nullifiers: conlist(StrictStr) = Field(...)
    one_time_pub_key: StrictStr = Field(..., alias="oneTimePubKey", description="Defines the one time public key.")
    proof: StrictStr = Field(..., description="Defines the proof.")
    random_seed: StrictStr = Field(..., alias="randomSeed", description="Represents a 256-bit seed that must be chosen independently at random for each JoinSplit description.")
    v_pub_new: StrictStr = Field(..., alias="vPubNew", description="Defines the value that the joinSplit transfer will insert into the transparent transaction value pool.")
    v_pub_old: StrictStr = Field(..., alias="vPubOld", description="Defines the value that the joinSplit transfer will remove from the transparent transaction value pool.")
    __properties = ["anchor", "cipherTexts", "commitments", "macs", "nullifiers", "oneTimePubKey", "proof", "randomSeed", "vPubNew", "vPubOld"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ListTransactionsByBlockHashRIBSZVJoinSplitInner:
        """Create an instance of ListTransactionsByBlockHashRIBSZVJoinSplitInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListTransactionsByBlockHashRIBSZVJoinSplitInner:
        """Create an instance of ListTransactionsByBlockHashRIBSZVJoinSplitInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ListTransactionsByBlockHashRIBSZVJoinSplitInner.parse_obj(obj)

        _obj = ListTransactionsByBlockHashRIBSZVJoinSplitInner.parse_obj({
            "anchor": obj.get("anchor"),
            "cipher_texts": obj.get("cipherTexts"),
            "commitments": obj.get("commitments"),
            "macs": obj.get("macs"),
            "nullifiers": obj.get("nullifiers"),
            "one_time_pub_key": obj.get("oneTimePubKey"),
            "proof": obj.get("proof"),
            "random_seed": obj.get("randomSeed"),
            "v_pub_new": obj.get("vPubNew"),
            "v_pub_old": obj.get("vPubOld")
        })
        return _obj

