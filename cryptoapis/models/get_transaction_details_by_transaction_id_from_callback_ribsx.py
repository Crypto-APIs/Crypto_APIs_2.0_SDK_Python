# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.  # noqa: E501

    The version of the OpenAPI document: 2021-03-20
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from cryptoapis.models.get_transaction_details_by_transaction_id_from_callback_ribsx_value import GetTransactionDetailsByTransactionIDFromCallbackRIBSXValue
from cryptoapis.models.get_xrp_ripple_transaction_details_by_transaction_idri_offer import GetXRPRippleTransactionDetailsByTransactionIDRIOffer
from cryptoapis.models.get_xrp_ripple_transaction_details_by_transaction_idri_receive import GetXRPRippleTransactionDetailsByTransactionIDRIReceive

class GetTransactionDetailsByTransactionIDFromCallbackRIBSX(BaseModel):
    """
    XRP
    """
    additional_data: StrictStr = Field(..., alias="additionalData", description="Represents additional data that may be needed.")
    destination_tag: Optional[StrictInt] = Field(None, alias="destinationTag", description="Defines the destination tag value.")
    offer: GetXRPRippleTransactionDetailsByTransactionIDRIOffer = Field(...)
    receive: GetXRPRippleTransactionDetailsByTransactionIDRIReceive = Field(...)
    sequence: StrictInt = Field(..., description="Defines the transaction input's sequence as an integer, which is is used when transactions are replaced with newer versions before LockTime.")
    status: StrictStr = Field(..., description="Defines the status of the transaction.")
    type: StrictStr = Field(..., description="Defines the type of the transaction.")
    value: GetTransactionDetailsByTransactionIDFromCallbackRIBSXValue = Field(...)
    __properties = ["additionalData", "destinationTag", "offer", "receive", "sequence", "status", "type", "value"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetTransactionDetailsByTransactionIDFromCallbackRIBSX:
        """Create an instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSX from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of offer
        if self.offer:
            _dict['offer'] = self.offer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receive
        if self.receive:
            _dict['receive'] = self.receive.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict['value'] = self.value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetTransactionDetailsByTransactionIDFromCallbackRIBSX:
        """Create an instance of GetTransactionDetailsByTransactionIDFromCallbackRIBSX from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetTransactionDetailsByTransactionIDFromCallbackRIBSX.parse_obj(obj)

        _obj = GetTransactionDetailsByTransactionIDFromCallbackRIBSX.parse_obj({
            "additional_data": obj.get("additionalData"),
            "destination_tag": obj.get("destinationTag"),
            "offer": GetXRPRippleTransactionDetailsByTransactionIDRIOffer.from_dict(obj.get("offer")) if obj.get("offer") is not None else None,
            "receive": GetXRPRippleTransactionDetailsByTransactionIDRIReceive.from_dict(obj.get("receive")) if obj.get("receive") is not None else None,
            "sequence": obj.get("sequence"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "value": GetTransactionDetailsByTransactionIDFromCallbackRIBSXValue.from_dict(obj.get("value")) if obj.get("value") is not None else None
        })
        return _obj

