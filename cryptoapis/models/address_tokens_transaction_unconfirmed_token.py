# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.  # noqa: E501

    The version of the OpenAPI document: 2021-03-20
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from cryptoapis.models.address_tokens_transaction_unconfirmed_erc20 import AddressTokensTransactionUnconfirmedErc20
from cryptoapis.models.address_tokens_transaction_unconfirmed_erc721 import AddressTokensTransactionUnconfirmedErc721
from cryptoapis.models.address_tokens_transaction_unconfirmed_omni import AddressTokensTransactionUnconfirmedOmni
from typing import Any, List
from pydantic import StrictStr, Field

ADDRESSTOKENSTRANSACTIONUNCONFIRMEDTOKEN_ONE_OF_SCHEMAS = ["AddressTokensTransactionUnconfirmedErc20", "AddressTokensTransactionUnconfirmedErc721", "AddressTokensTransactionUnconfirmedOmni"]

class AddressTokensTransactionUnconfirmedToken(BaseModel):
    """
    AddressTokensTransactionUnconfirmedToken
    """
    # data type: AddressTokensTransactionUnconfirmedErc20
    oneof_schema_1_validator: Optional[AddressTokensTransactionUnconfirmedErc20] = None
    # data type: AddressTokensTransactionUnconfirmedErc721
    oneof_schema_2_validator: Optional[AddressTokensTransactionUnconfirmedErc721] = None
    # data type: AddressTokensTransactionUnconfirmedOmni
    oneof_schema_3_validator: Optional[AddressTokensTransactionUnconfirmedOmni] = None
    actual_instance: Any
    one_of_schemas: List[str] = Field(ADDRESSTOKENSTRANSACTIONUNCONFIRMEDTOKEN_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = AddressTokensTransactionUnconfirmedToken.construct()
        error_messages = []
        match = 0
        # validate data type: AddressTokensTransactionUnconfirmedErc20
        if not isinstance(v, AddressTokensTransactionUnconfirmedErc20):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddressTokensTransactionUnconfirmedErc20`")
        else:
            match += 1
        # validate data type: AddressTokensTransactionUnconfirmedErc721
        if not isinstance(v, AddressTokensTransactionUnconfirmedErc721):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddressTokensTransactionUnconfirmedErc721`")
        else:
            match += 1
        # validate data type: AddressTokensTransactionUnconfirmedOmni
        if not isinstance(v, AddressTokensTransactionUnconfirmedOmni):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddressTokensTransactionUnconfirmedOmni`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in AddressTokensTransactionUnconfirmedToken with oneOf schemas: AddressTokensTransactionUnconfirmedErc20, AddressTokensTransactionUnconfirmedErc721, AddressTokensTransactionUnconfirmedOmni. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in AddressTokensTransactionUnconfirmedToken with oneOf schemas: AddressTokensTransactionUnconfirmedErc20, AddressTokensTransactionUnconfirmedErc721, AddressTokensTransactionUnconfirmedOmni. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> AddressTokensTransactionUnconfirmedToken:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> AddressTokensTransactionUnconfirmedToken:
        """Returns the object represented by the json string"""
        instance = AddressTokensTransactionUnconfirmedToken.construct()
        error_messages = []
        match = 0

        # deserialize data into AddressTokensTransactionUnconfirmedErc20
        try:
            instance.actual_instance = AddressTokensTransactionUnconfirmedErc20.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddressTokensTransactionUnconfirmedErc721
        try:
            instance.actual_instance = AddressTokensTransactionUnconfirmedErc721.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddressTokensTransactionUnconfirmedOmni
        try:
            instance.actual_instance = AddressTokensTransactionUnconfirmedOmni.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into AddressTokensTransactionUnconfirmedToken with oneOf schemas: AddressTokensTransactionUnconfirmedErc20, AddressTokensTransactionUnconfirmedErc721, AddressTokensTransactionUnconfirmedOmni. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AddressTokensTransactionUnconfirmedToken with oneOf schemas: AddressTokensTransactionUnconfirmedErc20, AddressTokensTransactionUnconfirmedErc721, AddressTokensTransactionUnconfirmedOmni. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

