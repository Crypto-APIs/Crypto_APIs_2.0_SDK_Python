# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.  # noqa: E501

    The version of the OpenAPI document: 2021-03-20
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from cryptoapis.models.create_automatic_tokens_forwarding_rb_token_data import CreateAutomaticTokensForwardingRBTokenData

class CreateAutomaticTokensForwardingRBDataItem(BaseModel):
    """
    CreateAutomaticTokensForwardingRBDataItem
    """
    callback_secret_key: Optional[StrictStr] = Field(None, alias="callbackSecretKey", description="Represents the Secret Key value provided by the customer. This field is used for security purposes during the callback notification, in order to prove the sender of the callback as Crypto APIs. For more information please see our [Documentation](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-security).")
    callback_url: StrictStr = Field(..., alias="callbackUrl", description="Represents the URL that is set by the customer where the callback will be received at. The callback notification will be received only if and when the event occurs. `We support ONLY httpS type of protocol`.")
    confirmations_count: StrictStr = Field(..., alias="confirmationsCount", description="Represents the number of confirmations, i.e. the amount of blocks that have been built on top of this block.")
    fee_priority: StrictStr = Field(..., alias="feePriority", description="Represents the fee priority of the automation, whether it is \"SLOW\", \"STANDARD\" or \"FAST\".")
    minimum_transfer_amount: StrictStr = Field(..., alias="minimumTransferAmount", description="Represents the minimum transfer amount of the currency in the `fromAddress` that can be allowed for an automatic forwarding.")
    to_address: StrictStr = Field(..., alias="toAddress", description="Represents the hash of the address the currency is forwarded to.")
    token_data: CreateAutomaticTokensForwardingRBTokenData = Field(..., alias="tokenData")
    __properties = ["callbackSecretKey", "callbackUrl", "confirmationsCount", "feePriority", "minimumTransferAmount", "toAddress", "tokenData"]

    @validator('fee_priority')
    def fee_priority_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('slow', 'standard', 'fast'):
            raise ValueError("must be one of enum values ('slow', 'standard', 'fast')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateAutomaticTokensForwardingRBDataItem:
        """Create an instance of CreateAutomaticTokensForwardingRBDataItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of token_data
        if self.token_data:
            _dict['tokenData'] = self.token_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateAutomaticTokensForwardingRBDataItem:
        """Create an instance of CreateAutomaticTokensForwardingRBDataItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateAutomaticTokensForwardingRBDataItem.parse_obj(obj)

        _obj = CreateAutomaticTokensForwardingRBDataItem.parse_obj({
            "callback_secret_key": obj.get("callbackSecretKey"),
            "callback_url": obj.get("callbackUrl"),
            "confirmations_count": obj.get("confirmationsCount"),
            "fee_priority": obj.get("feePriority"),
            "minimum_transfer_amount": obj.get("minimumTransferAmount"),
            "to_address": obj.get("toAddress"),
            "token_data": CreateAutomaticTokensForwardingRBTokenData.from_dict(obj.get("tokenData")) if obj.get("tokenData") is not None else None
        })
        return _obj

