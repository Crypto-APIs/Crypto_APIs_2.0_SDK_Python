# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.  # noqa: E501

    The version of the OpenAPI document: 2021-03-20
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class GetLastMinedBlockRIBSD2(BaseModel):
    """
    Dash
    """
    bits: StrictStr = Field(..., description="Represents a specific sub-unit of Dash. Bits have two-decimal precision.")
    chainwork: StrictStr = Field(..., description="Represents a hexadecimal number of all the hashes necessary to produce the current chain. E.g., when converting 0000000000000000000000000000000000000000000086859f7a841475b236fd to a decimal you get 635262017308958427068157 hashes, or 635262 exahashes.")
    difficulty: Optional[StrictStr] = Field(None, description="Numeric representation of the block difficulty")
    merkle_root: StrictStr = Field(..., alias="merkleRoot", description="Defines the single and final (root) node of a Merkle tree. It is the combined hash of all transactions' hashes that are part of a blockchain block.")
    nonce: StrictInt = Field(..., description="Numeric representation of the block nonce")
    size: StrictInt = Field(..., description="Represents the total size of the block in Bytes.")
    version: StrictInt = Field(..., description="Represents the version of the specific block on the blockchain.")
    version_hex: StrictStr = Field(..., alias="versionHex", description="Is the hexadecimal string representation of the block's version.")
    __properties = ["bits", "chainwork", "difficulty", "merkleRoot", "nonce", "size", "version", "versionHex"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetLastMinedBlockRIBSD2:
        """Create an instance of GetLastMinedBlockRIBSD2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetLastMinedBlockRIBSD2:
        """Create an instance of GetLastMinedBlockRIBSD2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetLastMinedBlockRIBSD2.parse_obj(obj)

        _obj = GetLastMinedBlockRIBSD2.parse_obj({
            "bits": obj.get("bits"),
            "chainwork": obj.get("chainwork"),
            "difficulty": obj.get("difficulty"),
            "merkle_root": obj.get("merkleRoot"),
            "nonce": obj.get("nonce"),
            "size": obj.get("size"),
            "version": obj.get("version"),
            "version_hex": obj.get("versionHex")
        })
        return _obj

