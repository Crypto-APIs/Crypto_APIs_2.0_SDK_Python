# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.  # noqa: E501

    The version of the OpenAPI document: 2021-03-20
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr

class ListWalletTransactionsRIFungibleTokensInner(BaseModel):
    """
    ListWalletTransactionsRIFungibleTokensInner
    """
    amount: StrictStr = Field(..., description="Defines the amount of the fungible tokens.")
    converted_amount: StrictStr = Field(..., alias="convertedAmount", description="Defines the tokens' converted amount value.")
    exchange_rate_unit: StrictStr = Field(..., alias="exchangeRateUnit", description="Represents token's exchange rate unit.")
    name: StrictStr = Field(..., description="Defines the token's name as a string.")
    recipient: StrictStr = Field(..., description="The address which receives this transaction. In UTXO-based protocols like Bitcoin there could be several senders while in account-based protocols like Ethereum there is always only one")
    sender: StrictStr = Field(..., description="Represents the address which sends this transaction. In UTXO-based protocols like Bitcoin there could be several senders while in account-based protocols like Ethereum there is always only one sender.")
    symbol: StrictStr = Field(..., description="Defines the symbol of the fungible tokens.")
    token_decimals: StrictInt = Field(..., alias="tokenDecimals", description="Defines the decimals of the token, i.e. the number of digits that come after the decimal coma of the token.")
    type: StrictStr = Field(..., description="Defines the specific token type.")
    __properties = ["amount", "convertedAmount", "exchangeRateUnit", "name", "recipient", "sender", "symbol", "tokenDecimals", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ListWalletTransactionsRIFungibleTokensInner:
        """Create an instance of ListWalletTransactionsRIFungibleTokensInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListWalletTransactionsRIFungibleTokensInner:
        """Create an instance of ListWalletTransactionsRIFungibleTokensInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ListWalletTransactionsRIFungibleTokensInner.parse_obj(obj)

        _obj = ListWalletTransactionsRIFungibleTokensInner.parse_obj({
            "amount": obj.get("amount"),
            "converted_amount": obj.get("convertedAmount"),
            "exchange_rate_unit": obj.get("exchangeRateUnit"),
            "name": obj.get("name"),
            "recipient": obj.get("recipient"),
            "sender": obj.get("sender"),
            "symbol": obj.get("symbol"),
            "token_decimals": obj.get("tokenDecimals"),
            "type": obj.get("type")
        })
        return _obj

