# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.  # noqa: E501

    The version of the OpenAPI document: 2021-03-20
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from cryptoapis.models.list_confirmed_transactions_by_address_ribsb import ListConfirmedTransactionsByAddressRIBSB
from cryptoapis.models.list_confirmed_transactions_by_address_ribsbc import ListConfirmedTransactionsByAddressRIBSBC
from cryptoapis.models.list_confirmed_transactions_by_address_ribsbsc import ListConfirmedTransactionsByAddressRIBSBSC
from cryptoapis.models.list_confirmed_transactions_by_address_ribsd import ListConfirmedTransactionsByAddressRIBSD
from cryptoapis.models.list_confirmed_transactions_by_address_ribsd2 import ListConfirmedTransactionsByAddressRIBSD2
from cryptoapis.models.list_confirmed_transactions_by_address_ribse import ListConfirmedTransactionsByAddressRIBSE
from cryptoapis.models.list_confirmed_transactions_by_address_ribsec import ListConfirmedTransactionsByAddressRIBSEC
from cryptoapis.models.list_confirmed_transactions_by_address_ribsl import ListConfirmedTransactionsByAddressRIBSL
from cryptoapis.models.list_confirmed_transactions_by_address_ribst import ListConfirmedTransactionsByAddressRIBST
from cryptoapis.models.list_confirmed_transactions_by_address_ribst2 import ListConfirmedTransactionsByAddressRIBST2
from cryptoapis.models.list_confirmed_transactions_by_address_ribsz import ListConfirmedTransactionsByAddressRIBSZ
from typing import Any, List
from pydantic import StrictStr, Field

LISTCONFIRMEDTRANSACTIONSBYADDRESSRIBS_ONE_OF_SCHEMAS = ["ListConfirmedTransactionsByAddressRIBSB", "ListConfirmedTransactionsByAddressRIBSBC", "ListConfirmedTransactionsByAddressRIBSBSC", "ListConfirmedTransactionsByAddressRIBSD", "ListConfirmedTransactionsByAddressRIBSD2", "ListConfirmedTransactionsByAddressRIBSE", "ListConfirmedTransactionsByAddressRIBSEC", "ListConfirmedTransactionsByAddressRIBSL", "ListConfirmedTransactionsByAddressRIBST", "ListConfirmedTransactionsByAddressRIBST2", "ListConfirmedTransactionsByAddressRIBSZ"]

class ListConfirmedTransactionsByAddressRIBS(BaseModel):
    """
    ListConfirmedTransactionsByAddressRIBS
    """
    # data type: ListConfirmedTransactionsByAddressRIBSB
    oneof_schema_1_validator: Optional[ListConfirmedTransactionsByAddressRIBSB] = None
    # data type: ListConfirmedTransactionsByAddressRIBSBC
    oneof_schema_2_validator: Optional[ListConfirmedTransactionsByAddressRIBSBC] = None
    # data type: ListConfirmedTransactionsByAddressRIBSL
    oneof_schema_3_validator: Optional[ListConfirmedTransactionsByAddressRIBSL] = None
    # data type: ListConfirmedTransactionsByAddressRIBSD
    oneof_schema_4_validator: Optional[ListConfirmedTransactionsByAddressRIBSD] = None
    # data type: ListConfirmedTransactionsByAddressRIBSD2
    oneof_schema_5_validator: Optional[ListConfirmedTransactionsByAddressRIBSD2] = None
    # data type: ListConfirmedTransactionsByAddressRIBSEC
    oneof_schema_6_validator: Optional[ListConfirmedTransactionsByAddressRIBSEC] = None
    # data type: ListConfirmedTransactionsByAddressRIBSE
    oneof_schema_7_validator: Optional[ListConfirmedTransactionsByAddressRIBSE] = None
    # data type: ListConfirmedTransactionsByAddressRIBSBSC
    oneof_schema_8_validator: Optional[ListConfirmedTransactionsByAddressRIBSBSC] = None
    # data type: ListConfirmedTransactionsByAddressRIBSZ
    oneof_schema_9_validator: Optional[ListConfirmedTransactionsByAddressRIBSZ] = None
    # data type: ListConfirmedTransactionsByAddressRIBST
    oneof_schema_10_validator: Optional[ListConfirmedTransactionsByAddressRIBST] = None
    # data type: ListConfirmedTransactionsByAddressRIBST2
    oneof_schema_11_validator: Optional[ListConfirmedTransactionsByAddressRIBST2] = None
    actual_instance: Any
    one_of_schemas: List[str] = Field(LISTCONFIRMEDTRANSACTIONSBYADDRESSRIBS_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ListConfirmedTransactionsByAddressRIBS.construct()
        error_messages = []
        match = 0
        # validate data type: ListConfirmedTransactionsByAddressRIBSB
        if not isinstance(v, ListConfirmedTransactionsByAddressRIBSB):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListConfirmedTransactionsByAddressRIBSB`")
        else:
            match += 1
        # validate data type: ListConfirmedTransactionsByAddressRIBSBC
        if not isinstance(v, ListConfirmedTransactionsByAddressRIBSBC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListConfirmedTransactionsByAddressRIBSBC`")
        else:
            match += 1
        # validate data type: ListConfirmedTransactionsByAddressRIBSL
        if not isinstance(v, ListConfirmedTransactionsByAddressRIBSL):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListConfirmedTransactionsByAddressRIBSL`")
        else:
            match += 1
        # validate data type: ListConfirmedTransactionsByAddressRIBSD
        if not isinstance(v, ListConfirmedTransactionsByAddressRIBSD):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListConfirmedTransactionsByAddressRIBSD`")
        else:
            match += 1
        # validate data type: ListConfirmedTransactionsByAddressRIBSD2
        if not isinstance(v, ListConfirmedTransactionsByAddressRIBSD2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListConfirmedTransactionsByAddressRIBSD2`")
        else:
            match += 1
        # validate data type: ListConfirmedTransactionsByAddressRIBSEC
        if not isinstance(v, ListConfirmedTransactionsByAddressRIBSEC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListConfirmedTransactionsByAddressRIBSEC`")
        else:
            match += 1
        # validate data type: ListConfirmedTransactionsByAddressRIBSE
        if not isinstance(v, ListConfirmedTransactionsByAddressRIBSE):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListConfirmedTransactionsByAddressRIBSE`")
        else:
            match += 1
        # validate data type: ListConfirmedTransactionsByAddressRIBSBSC
        if not isinstance(v, ListConfirmedTransactionsByAddressRIBSBSC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListConfirmedTransactionsByAddressRIBSBSC`")
        else:
            match += 1
        # validate data type: ListConfirmedTransactionsByAddressRIBSZ
        if not isinstance(v, ListConfirmedTransactionsByAddressRIBSZ):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListConfirmedTransactionsByAddressRIBSZ`")
        else:
            match += 1
        # validate data type: ListConfirmedTransactionsByAddressRIBST
        if not isinstance(v, ListConfirmedTransactionsByAddressRIBST):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListConfirmedTransactionsByAddressRIBST`")
        else:
            match += 1
        # validate data type: ListConfirmedTransactionsByAddressRIBST2
        if not isinstance(v, ListConfirmedTransactionsByAddressRIBST2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListConfirmedTransactionsByAddressRIBST2`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ListConfirmedTransactionsByAddressRIBS with oneOf schemas: ListConfirmedTransactionsByAddressRIBSB, ListConfirmedTransactionsByAddressRIBSBC, ListConfirmedTransactionsByAddressRIBSBSC, ListConfirmedTransactionsByAddressRIBSD, ListConfirmedTransactionsByAddressRIBSD2, ListConfirmedTransactionsByAddressRIBSE, ListConfirmedTransactionsByAddressRIBSEC, ListConfirmedTransactionsByAddressRIBSL, ListConfirmedTransactionsByAddressRIBST, ListConfirmedTransactionsByAddressRIBST2, ListConfirmedTransactionsByAddressRIBSZ. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ListConfirmedTransactionsByAddressRIBS with oneOf schemas: ListConfirmedTransactionsByAddressRIBSB, ListConfirmedTransactionsByAddressRIBSBC, ListConfirmedTransactionsByAddressRIBSBSC, ListConfirmedTransactionsByAddressRIBSD, ListConfirmedTransactionsByAddressRIBSD2, ListConfirmedTransactionsByAddressRIBSE, ListConfirmedTransactionsByAddressRIBSEC, ListConfirmedTransactionsByAddressRIBSL, ListConfirmedTransactionsByAddressRIBST, ListConfirmedTransactionsByAddressRIBST2, ListConfirmedTransactionsByAddressRIBSZ. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> ListConfirmedTransactionsByAddressRIBS:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> ListConfirmedTransactionsByAddressRIBS:
        """Returns the object represented by the json string"""
        instance = ListConfirmedTransactionsByAddressRIBS.construct()
        error_messages = []
        match = 0

        # deserialize data into ListConfirmedTransactionsByAddressRIBSB
        try:
            instance.actual_instance = ListConfirmedTransactionsByAddressRIBSB.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListConfirmedTransactionsByAddressRIBSBC
        try:
            instance.actual_instance = ListConfirmedTransactionsByAddressRIBSBC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListConfirmedTransactionsByAddressRIBSL
        try:
            instance.actual_instance = ListConfirmedTransactionsByAddressRIBSL.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListConfirmedTransactionsByAddressRIBSD
        try:
            instance.actual_instance = ListConfirmedTransactionsByAddressRIBSD.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListConfirmedTransactionsByAddressRIBSD2
        try:
            instance.actual_instance = ListConfirmedTransactionsByAddressRIBSD2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListConfirmedTransactionsByAddressRIBSEC
        try:
            instance.actual_instance = ListConfirmedTransactionsByAddressRIBSEC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListConfirmedTransactionsByAddressRIBSE
        try:
            instance.actual_instance = ListConfirmedTransactionsByAddressRIBSE.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListConfirmedTransactionsByAddressRIBSBSC
        try:
            instance.actual_instance = ListConfirmedTransactionsByAddressRIBSBSC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListConfirmedTransactionsByAddressRIBSZ
        try:
            instance.actual_instance = ListConfirmedTransactionsByAddressRIBSZ.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListConfirmedTransactionsByAddressRIBST
        try:
            instance.actual_instance = ListConfirmedTransactionsByAddressRIBST.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListConfirmedTransactionsByAddressRIBST2
        try:
            instance.actual_instance = ListConfirmedTransactionsByAddressRIBST2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ListConfirmedTransactionsByAddressRIBS with oneOf schemas: ListConfirmedTransactionsByAddressRIBSB, ListConfirmedTransactionsByAddressRIBSBC, ListConfirmedTransactionsByAddressRIBSBSC, ListConfirmedTransactionsByAddressRIBSD, ListConfirmedTransactionsByAddressRIBSD2, ListConfirmedTransactionsByAddressRIBSE, ListConfirmedTransactionsByAddressRIBSEC, ListConfirmedTransactionsByAddressRIBSL, ListConfirmedTransactionsByAddressRIBST, ListConfirmedTransactionsByAddressRIBST2, ListConfirmedTransactionsByAddressRIBSZ. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ListConfirmedTransactionsByAddressRIBS with oneOf schemas: ListConfirmedTransactionsByAddressRIBSB, ListConfirmedTransactionsByAddressRIBSBC, ListConfirmedTransactionsByAddressRIBSBSC, ListConfirmedTransactionsByAddressRIBSD, ListConfirmedTransactionsByAddressRIBSD2, ListConfirmedTransactionsByAddressRIBSE, ListConfirmedTransactionsByAddressRIBSEC, ListConfirmedTransactionsByAddressRIBSL, ListConfirmedTransactionsByAddressRIBST, ListConfirmedTransactionsByAddressRIBST2, ListConfirmedTransactionsByAddressRIBSZ. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

