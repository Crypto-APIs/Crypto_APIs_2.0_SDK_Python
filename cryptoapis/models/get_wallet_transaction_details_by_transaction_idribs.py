# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.  # noqa: E501

    The version of the OpenAPI document: 2021-03-20
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from cryptoapis.models.get_wallet_transaction_details_by_transaction_idribsb import GetWalletTransactionDetailsByTransactionIDRIBSB
from cryptoapis.models.get_wallet_transaction_details_by_transaction_idribsbc import GetWalletTransactionDetailsByTransactionIDRIBSBC
from cryptoapis.models.get_wallet_transaction_details_by_transaction_idribsbsc import GetWalletTransactionDetailsByTransactionIDRIBSBSC
from cryptoapis.models.get_wallet_transaction_details_by_transaction_idribsd import GetWalletTransactionDetailsByTransactionIDRIBSD
from cryptoapis.models.get_wallet_transaction_details_by_transaction_idribsd2 import GetWalletTransactionDetailsByTransactionIDRIBSD2
from cryptoapis.models.get_wallet_transaction_details_by_transaction_idribse import GetWalletTransactionDetailsByTransactionIDRIBSE
from cryptoapis.models.get_wallet_transaction_details_by_transaction_idribsec import GetWalletTransactionDetailsByTransactionIDRIBSEC
from cryptoapis.models.get_wallet_transaction_details_by_transaction_idribsl import GetWalletTransactionDetailsByTransactionIDRIBSL
from cryptoapis.models.get_wallet_transaction_details_by_transaction_idribst import GetWalletTransactionDetailsByTransactionIDRIBST
from cryptoapis.models.get_wallet_transaction_details_by_transaction_idribsz import GetWalletTransactionDetailsByTransactionIDRIBSZ
from typing import Any, List
from pydantic import StrictStr, Field

GETWALLETTRANSACTIONDETAILSBYTRANSACTIONIDRIBS_ONE_OF_SCHEMAS = ["GetWalletTransactionDetailsByTransactionIDRIBSB", "GetWalletTransactionDetailsByTransactionIDRIBSBC", "GetWalletTransactionDetailsByTransactionIDRIBSBSC", "GetWalletTransactionDetailsByTransactionIDRIBSD", "GetWalletTransactionDetailsByTransactionIDRIBSD2", "GetWalletTransactionDetailsByTransactionIDRIBSE", "GetWalletTransactionDetailsByTransactionIDRIBSEC", "GetWalletTransactionDetailsByTransactionIDRIBSL", "GetWalletTransactionDetailsByTransactionIDRIBST", "GetWalletTransactionDetailsByTransactionIDRIBSZ"]

class GetWalletTransactionDetailsByTransactionIDRIBS(BaseModel):
    """
    GetWalletTransactionDetailsByTransactionIDRIBS
    """
    # data type: GetWalletTransactionDetailsByTransactionIDRIBSB
    oneof_schema_1_validator: Optional[GetWalletTransactionDetailsByTransactionIDRIBSB] = None
    # data type: GetWalletTransactionDetailsByTransactionIDRIBSE
    oneof_schema_2_validator: Optional[GetWalletTransactionDetailsByTransactionIDRIBSE] = None
    # data type: GetWalletTransactionDetailsByTransactionIDRIBSL
    oneof_schema_3_validator: Optional[GetWalletTransactionDetailsByTransactionIDRIBSL] = None
    # data type: GetWalletTransactionDetailsByTransactionIDRIBSBC
    oneof_schema_4_validator: Optional[GetWalletTransactionDetailsByTransactionIDRIBSBC] = None
    # data type: GetWalletTransactionDetailsByTransactionIDRIBSEC
    oneof_schema_5_validator: Optional[GetWalletTransactionDetailsByTransactionIDRIBSEC] = None
    # data type: GetWalletTransactionDetailsByTransactionIDRIBSD
    oneof_schema_6_validator: Optional[GetWalletTransactionDetailsByTransactionIDRIBSD] = None
    # data type: GetWalletTransactionDetailsByTransactionIDRIBSD2
    oneof_schema_7_validator: Optional[GetWalletTransactionDetailsByTransactionIDRIBSD2] = None
    # data type: GetWalletTransactionDetailsByTransactionIDRIBSZ
    oneof_schema_8_validator: Optional[GetWalletTransactionDetailsByTransactionIDRIBSZ] = None
    # data type: GetWalletTransactionDetailsByTransactionIDRIBSBSC
    oneof_schema_9_validator: Optional[GetWalletTransactionDetailsByTransactionIDRIBSBSC] = None
    # data type: GetWalletTransactionDetailsByTransactionIDRIBST
    oneof_schema_10_validator: Optional[GetWalletTransactionDetailsByTransactionIDRIBST] = None
    actual_instance: Any
    one_of_schemas: List[str] = Field(GETWALLETTRANSACTIONDETAILSBYTRANSACTIONIDRIBS_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = GetWalletTransactionDetailsByTransactionIDRIBS.construct()
        error_messages = []
        match = 0
        # validate data type: GetWalletTransactionDetailsByTransactionIDRIBSB
        if not isinstance(v, GetWalletTransactionDetailsByTransactionIDRIBSB):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetWalletTransactionDetailsByTransactionIDRIBSB`")
        else:
            match += 1
        # validate data type: GetWalletTransactionDetailsByTransactionIDRIBSE
        if not isinstance(v, GetWalletTransactionDetailsByTransactionIDRIBSE):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetWalletTransactionDetailsByTransactionIDRIBSE`")
        else:
            match += 1
        # validate data type: GetWalletTransactionDetailsByTransactionIDRIBSL
        if not isinstance(v, GetWalletTransactionDetailsByTransactionIDRIBSL):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetWalletTransactionDetailsByTransactionIDRIBSL`")
        else:
            match += 1
        # validate data type: GetWalletTransactionDetailsByTransactionIDRIBSBC
        if not isinstance(v, GetWalletTransactionDetailsByTransactionIDRIBSBC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetWalletTransactionDetailsByTransactionIDRIBSBC`")
        else:
            match += 1
        # validate data type: GetWalletTransactionDetailsByTransactionIDRIBSEC
        if not isinstance(v, GetWalletTransactionDetailsByTransactionIDRIBSEC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetWalletTransactionDetailsByTransactionIDRIBSEC`")
        else:
            match += 1
        # validate data type: GetWalletTransactionDetailsByTransactionIDRIBSD
        if not isinstance(v, GetWalletTransactionDetailsByTransactionIDRIBSD):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetWalletTransactionDetailsByTransactionIDRIBSD`")
        else:
            match += 1
        # validate data type: GetWalletTransactionDetailsByTransactionIDRIBSD2
        if not isinstance(v, GetWalletTransactionDetailsByTransactionIDRIBSD2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetWalletTransactionDetailsByTransactionIDRIBSD2`")
        else:
            match += 1
        # validate data type: GetWalletTransactionDetailsByTransactionIDRIBSZ
        if not isinstance(v, GetWalletTransactionDetailsByTransactionIDRIBSZ):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetWalletTransactionDetailsByTransactionIDRIBSZ`")
        else:
            match += 1
        # validate data type: GetWalletTransactionDetailsByTransactionIDRIBSBSC
        if not isinstance(v, GetWalletTransactionDetailsByTransactionIDRIBSBSC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetWalletTransactionDetailsByTransactionIDRIBSBSC`")
        else:
            match += 1
        # validate data type: GetWalletTransactionDetailsByTransactionIDRIBST
        if not isinstance(v, GetWalletTransactionDetailsByTransactionIDRIBST):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetWalletTransactionDetailsByTransactionIDRIBST`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in GetWalletTransactionDetailsByTransactionIDRIBS with oneOf schemas: GetWalletTransactionDetailsByTransactionIDRIBSB, GetWalletTransactionDetailsByTransactionIDRIBSBC, GetWalletTransactionDetailsByTransactionIDRIBSBSC, GetWalletTransactionDetailsByTransactionIDRIBSD, GetWalletTransactionDetailsByTransactionIDRIBSD2, GetWalletTransactionDetailsByTransactionIDRIBSE, GetWalletTransactionDetailsByTransactionIDRIBSEC, GetWalletTransactionDetailsByTransactionIDRIBSL, GetWalletTransactionDetailsByTransactionIDRIBST, GetWalletTransactionDetailsByTransactionIDRIBSZ. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in GetWalletTransactionDetailsByTransactionIDRIBS with oneOf schemas: GetWalletTransactionDetailsByTransactionIDRIBSB, GetWalletTransactionDetailsByTransactionIDRIBSBC, GetWalletTransactionDetailsByTransactionIDRIBSBSC, GetWalletTransactionDetailsByTransactionIDRIBSD, GetWalletTransactionDetailsByTransactionIDRIBSD2, GetWalletTransactionDetailsByTransactionIDRIBSE, GetWalletTransactionDetailsByTransactionIDRIBSEC, GetWalletTransactionDetailsByTransactionIDRIBSL, GetWalletTransactionDetailsByTransactionIDRIBST, GetWalletTransactionDetailsByTransactionIDRIBSZ. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> GetWalletTransactionDetailsByTransactionIDRIBS:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> GetWalletTransactionDetailsByTransactionIDRIBS:
        """Returns the object represented by the json string"""
        instance = GetWalletTransactionDetailsByTransactionIDRIBS.construct()
        error_messages = []
        match = 0

        # deserialize data into GetWalletTransactionDetailsByTransactionIDRIBSB
        try:
            instance.actual_instance = GetWalletTransactionDetailsByTransactionIDRIBSB.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetWalletTransactionDetailsByTransactionIDRIBSE
        try:
            instance.actual_instance = GetWalletTransactionDetailsByTransactionIDRIBSE.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetWalletTransactionDetailsByTransactionIDRIBSL
        try:
            instance.actual_instance = GetWalletTransactionDetailsByTransactionIDRIBSL.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetWalletTransactionDetailsByTransactionIDRIBSBC
        try:
            instance.actual_instance = GetWalletTransactionDetailsByTransactionIDRIBSBC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetWalletTransactionDetailsByTransactionIDRIBSEC
        try:
            instance.actual_instance = GetWalletTransactionDetailsByTransactionIDRIBSEC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetWalletTransactionDetailsByTransactionIDRIBSD
        try:
            instance.actual_instance = GetWalletTransactionDetailsByTransactionIDRIBSD.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetWalletTransactionDetailsByTransactionIDRIBSD2
        try:
            instance.actual_instance = GetWalletTransactionDetailsByTransactionIDRIBSD2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetWalletTransactionDetailsByTransactionIDRIBSZ
        try:
            instance.actual_instance = GetWalletTransactionDetailsByTransactionIDRIBSZ.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetWalletTransactionDetailsByTransactionIDRIBSBSC
        try:
            instance.actual_instance = GetWalletTransactionDetailsByTransactionIDRIBSBSC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetWalletTransactionDetailsByTransactionIDRIBST
        try:
            instance.actual_instance = GetWalletTransactionDetailsByTransactionIDRIBST.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into GetWalletTransactionDetailsByTransactionIDRIBS with oneOf schemas: GetWalletTransactionDetailsByTransactionIDRIBSB, GetWalletTransactionDetailsByTransactionIDRIBSBC, GetWalletTransactionDetailsByTransactionIDRIBSBSC, GetWalletTransactionDetailsByTransactionIDRIBSD, GetWalletTransactionDetailsByTransactionIDRIBSD2, GetWalletTransactionDetailsByTransactionIDRIBSE, GetWalletTransactionDetailsByTransactionIDRIBSEC, GetWalletTransactionDetailsByTransactionIDRIBSL, GetWalletTransactionDetailsByTransactionIDRIBST, GetWalletTransactionDetailsByTransactionIDRIBSZ. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into GetWalletTransactionDetailsByTransactionIDRIBS with oneOf schemas: GetWalletTransactionDetailsByTransactionIDRIBSB, GetWalletTransactionDetailsByTransactionIDRIBSBC, GetWalletTransactionDetailsByTransactionIDRIBSBSC, GetWalletTransactionDetailsByTransactionIDRIBSD, GetWalletTransactionDetailsByTransactionIDRIBSD2, GetWalletTransactionDetailsByTransactionIDRIBSE, GetWalletTransactionDetailsByTransactionIDRIBSEC, GetWalletTransactionDetailsByTransactionIDRIBSL, GetWalletTransactionDetailsByTransactionIDRIBST, GetWalletTransactionDetailsByTransactionIDRIBSZ. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

