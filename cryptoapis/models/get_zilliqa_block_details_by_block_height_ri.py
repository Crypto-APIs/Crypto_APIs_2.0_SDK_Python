# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.  # noqa: E501

    The version of the OpenAPI document: 2021-03-20
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

class GetZilliqaBlockDetailsByBlockHeightRI(BaseModel):
    """
    GetZilliqaBlockDetailsByBlockHeightRI
    """
    block_hash: StrictStr = Field(..., alias="blockHash", description="Represents the hash of the block, which is its unique identifier. It represents a cryptographic digital fingerprint made by hashing the block header twice through the SHA256 algorithm.")
    difficulty: StrictStr = Field(..., description="Defines how difficult it is for a specific miner to mine the block.")
    ds_block: StrictInt = Field(..., alias="dsBlock", description="Represents the Directory Service block which contains metadata about the miners who participate in the consensus protocol.")
    ds_difficulty: StrictStr = Field(..., alias="dsDifficulty", description="Defines how difficult it is to mine the dsBlocks.")
    ds_leader: StrictStr = Field(..., alias="dsLeader", description="Represents a part of the DS Committee which leads the consensus protocol for the epoch.")
    gas_limit: StrictInt = Field(..., alias="gasLimit", description="Represents the maximum amount of gas allowed in the block in order to determine how many transactions it can fit.")
    gas_used: StrictInt = Field(..., alias="gasUsed", description="Defines how much of the gas for the block has been used.")
    micro_blocks: conlist(StrictStr) = Field(..., alias="microBlocks")
    next_block_hash: StrictStr = Field(..., alias="nextBlockHash", description="Defines the hash of the next block from the specific blockchain.")
    previous_block_hash: StrictStr = Field(..., alias="previousBlockHash", description="Represents the hash of the previous block, also known as the parent block.")
    timestamp: StrictInt = Field(..., description="Defines the exact date/time when this block was mined in Unix Timestamp.")
    transactions_count: StrictInt = Field(..., alias="transactionsCount", description="Represents the total number of all transactions as part of this block.")
    __properties = ["blockHash", "difficulty", "dsBlock", "dsDifficulty", "dsLeader", "gasLimit", "gasUsed", "microBlocks", "nextBlockHash", "previousBlockHash", "timestamp", "transactionsCount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetZilliqaBlockDetailsByBlockHeightRI:
        """Create an instance of GetZilliqaBlockDetailsByBlockHeightRI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetZilliqaBlockDetailsByBlockHeightRI:
        """Create an instance of GetZilliqaBlockDetailsByBlockHeightRI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetZilliqaBlockDetailsByBlockHeightRI.parse_obj(obj)

        _obj = GetZilliqaBlockDetailsByBlockHeightRI.parse_obj({
            "block_hash": obj.get("blockHash"),
            "difficulty": obj.get("difficulty"),
            "ds_block": obj.get("dsBlock"),
            "ds_difficulty": obj.get("dsDifficulty"),
            "ds_leader": obj.get("dsLeader"),
            "gas_limit": obj.get("gasLimit"),
            "gas_used": obj.get("gasUsed"),
            "micro_blocks": obj.get("microBlocks"),
            "next_block_hash": obj.get("nextBlockHash"),
            "previous_block_hash": obj.get("previousBlockHash"),
            "timestamp": obj.get("timestamp"),
            "transactions_count": obj.get("transactionsCount")
        })
        return _obj

