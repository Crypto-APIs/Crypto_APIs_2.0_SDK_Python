# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.  # noqa: E501

    The version of the OpenAPI document: 2021-03-20
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from cryptoapis.models.get_transaction_details_by_transaction_idribsb import GetTransactionDetailsByTransactionIDRIBSB
from cryptoapis.models.get_transaction_details_by_transaction_idribsbc import GetTransactionDetailsByTransactionIDRIBSBC
from cryptoapis.models.get_transaction_details_by_transaction_idribsbsc import GetTransactionDetailsByTransactionIDRIBSBSC
from cryptoapis.models.get_transaction_details_by_transaction_idribsd import GetTransactionDetailsByTransactionIDRIBSD
from cryptoapis.models.get_transaction_details_by_transaction_idribsd2 import GetTransactionDetailsByTransactionIDRIBSD2
from cryptoapis.models.get_transaction_details_by_transaction_idribse import GetTransactionDetailsByTransactionIDRIBSE
from cryptoapis.models.get_transaction_details_by_transaction_idribsec import GetTransactionDetailsByTransactionIDRIBSEC
from cryptoapis.models.get_transaction_details_by_transaction_idribsl import GetTransactionDetailsByTransactionIDRIBSL
from cryptoapis.models.get_transaction_details_by_transaction_idribsz import GetTransactionDetailsByTransactionIDRIBSZ
from typing import Any, List
from pydantic import StrictStr, Field

GETTRANSACTIONDETAILSBYTRANSACTIONIDRIBS_ONE_OF_SCHEMAS = ["GetTransactionDetailsByTransactionIDRIBSB", "GetTransactionDetailsByTransactionIDRIBSBC", "GetTransactionDetailsByTransactionIDRIBSBSC", "GetTransactionDetailsByTransactionIDRIBSD", "GetTransactionDetailsByTransactionIDRIBSD2", "GetTransactionDetailsByTransactionIDRIBSE", "GetTransactionDetailsByTransactionIDRIBSEC", "GetTransactionDetailsByTransactionIDRIBSL", "GetTransactionDetailsByTransactionIDRIBSZ"]

class GetTransactionDetailsByTransactionIDRIBS(BaseModel):
    """
    GetTransactionDetailsByTransactionIDRIBS
    """
    # data type: GetTransactionDetailsByTransactionIDRIBSB
    oneof_schema_1_validator: Optional[GetTransactionDetailsByTransactionIDRIBSB] = None
    # data type: GetTransactionDetailsByTransactionIDRIBSBC
    oneof_schema_2_validator: Optional[GetTransactionDetailsByTransactionIDRIBSBC] = None
    # data type: GetTransactionDetailsByTransactionIDRIBSL
    oneof_schema_3_validator: Optional[GetTransactionDetailsByTransactionIDRIBSL] = None
    # data type: GetTransactionDetailsByTransactionIDRIBSD
    oneof_schema_4_validator: Optional[GetTransactionDetailsByTransactionIDRIBSD] = None
    # data type: GetTransactionDetailsByTransactionIDRIBSD2
    oneof_schema_5_validator: Optional[GetTransactionDetailsByTransactionIDRIBSD2] = None
    # data type: GetTransactionDetailsByTransactionIDRIBSE
    oneof_schema_6_validator: Optional[GetTransactionDetailsByTransactionIDRIBSE] = None
    # data type: GetTransactionDetailsByTransactionIDRIBSEC
    oneof_schema_7_validator: Optional[GetTransactionDetailsByTransactionIDRIBSEC] = None
    # data type: GetTransactionDetailsByTransactionIDRIBSBSC
    oneof_schema_8_validator: Optional[GetTransactionDetailsByTransactionIDRIBSBSC] = None
    # data type: GetTransactionDetailsByTransactionIDRIBSZ
    oneof_schema_9_validator: Optional[GetTransactionDetailsByTransactionIDRIBSZ] = None
    actual_instance: Any
    one_of_schemas: List[str] = Field(GETTRANSACTIONDETAILSBYTRANSACTIONIDRIBS_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = GetTransactionDetailsByTransactionIDRIBS.construct()
        error_messages = []
        match = 0
        # validate data type: GetTransactionDetailsByTransactionIDRIBSB
        if not isinstance(v, GetTransactionDetailsByTransactionIDRIBSB):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetTransactionDetailsByTransactionIDRIBSB`")
        else:
            match += 1
        # validate data type: GetTransactionDetailsByTransactionIDRIBSBC
        if not isinstance(v, GetTransactionDetailsByTransactionIDRIBSBC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetTransactionDetailsByTransactionIDRIBSBC`")
        else:
            match += 1
        # validate data type: GetTransactionDetailsByTransactionIDRIBSL
        if not isinstance(v, GetTransactionDetailsByTransactionIDRIBSL):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetTransactionDetailsByTransactionIDRIBSL`")
        else:
            match += 1
        # validate data type: GetTransactionDetailsByTransactionIDRIBSD
        if not isinstance(v, GetTransactionDetailsByTransactionIDRIBSD):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetTransactionDetailsByTransactionIDRIBSD`")
        else:
            match += 1
        # validate data type: GetTransactionDetailsByTransactionIDRIBSD2
        if not isinstance(v, GetTransactionDetailsByTransactionIDRIBSD2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetTransactionDetailsByTransactionIDRIBSD2`")
        else:
            match += 1
        # validate data type: GetTransactionDetailsByTransactionIDRIBSE
        if not isinstance(v, GetTransactionDetailsByTransactionIDRIBSE):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetTransactionDetailsByTransactionIDRIBSE`")
        else:
            match += 1
        # validate data type: GetTransactionDetailsByTransactionIDRIBSEC
        if not isinstance(v, GetTransactionDetailsByTransactionIDRIBSEC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetTransactionDetailsByTransactionIDRIBSEC`")
        else:
            match += 1
        # validate data type: GetTransactionDetailsByTransactionIDRIBSBSC
        if not isinstance(v, GetTransactionDetailsByTransactionIDRIBSBSC):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetTransactionDetailsByTransactionIDRIBSBSC`")
        else:
            match += 1
        # validate data type: GetTransactionDetailsByTransactionIDRIBSZ
        if not isinstance(v, GetTransactionDetailsByTransactionIDRIBSZ):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetTransactionDetailsByTransactionIDRIBSZ`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in GetTransactionDetailsByTransactionIDRIBS with oneOf schemas: GetTransactionDetailsByTransactionIDRIBSB, GetTransactionDetailsByTransactionIDRIBSBC, GetTransactionDetailsByTransactionIDRIBSBSC, GetTransactionDetailsByTransactionIDRIBSD, GetTransactionDetailsByTransactionIDRIBSD2, GetTransactionDetailsByTransactionIDRIBSE, GetTransactionDetailsByTransactionIDRIBSEC, GetTransactionDetailsByTransactionIDRIBSL, GetTransactionDetailsByTransactionIDRIBSZ. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in GetTransactionDetailsByTransactionIDRIBS with oneOf schemas: GetTransactionDetailsByTransactionIDRIBSB, GetTransactionDetailsByTransactionIDRIBSBC, GetTransactionDetailsByTransactionIDRIBSBSC, GetTransactionDetailsByTransactionIDRIBSD, GetTransactionDetailsByTransactionIDRIBSD2, GetTransactionDetailsByTransactionIDRIBSE, GetTransactionDetailsByTransactionIDRIBSEC, GetTransactionDetailsByTransactionIDRIBSL, GetTransactionDetailsByTransactionIDRIBSZ. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> GetTransactionDetailsByTransactionIDRIBS:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> GetTransactionDetailsByTransactionIDRIBS:
        """Returns the object represented by the json string"""
        instance = GetTransactionDetailsByTransactionIDRIBS.construct()
        error_messages = []
        match = 0

        # deserialize data into GetTransactionDetailsByTransactionIDRIBSB
        try:
            instance.actual_instance = GetTransactionDetailsByTransactionIDRIBSB.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetTransactionDetailsByTransactionIDRIBSBC
        try:
            instance.actual_instance = GetTransactionDetailsByTransactionIDRIBSBC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetTransactionDetailsByTransactionIDRIBSL
        try:
            instance.actual_instance = GetTransactionDetailsByTransactionIDRIBSL.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetTransactionDetailsByTransactionIDRIBSD
        try:
            instance.actual_instance = GetTransactionDetailsByTransactionIDRIBSD.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetTransactionDetailsByTransactionIDRIBSD2
        try:
            instance.actual_instance = GetTransactionDetailsByTransactionIDRIBSD2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetTransactionDetailsByTransactionIDRIBSE
        try:
            instance.actual_instance = GetTransactionDetailsByTransactionIDRIBSE.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetTransactionDetailsByTransactionIDRIBSEC
        try:
            instance.actual_instance = GetTransactionDetailsByTransactionIDRIBSEC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetTransactionDetailsByTransactionIDRIBSBSC
        try:
            instance.actual_instance = GetTransactionDetailsByTransactionIDRIBSBSC.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetTransactionDetailsByTransactionIDRIBSZ
        try:
            instance.actual_instance = GetTransactionDetailsByTransactionIDRIBSZ.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into GetTransactionDetailsByTransactionIDRIBS with oneOf schemas: GetTransactionDetailsByTransactionIDRIBSB, GetTransactionDetailsByTransactionIDRIBSBC, GetTransactionDetailsByTransactionIDRIBSBSC, GetTransactionDetailsByTransactionIDRIBSD, GetTransactionDetailsByTransactionIDRIBSD2, GetTransactionDetailsByTransactionIDRIBSE, GetTransactionDetailsByTransactionIDRIBSEC, GetTransactionDetailsByTransactionIDRIBSL, GetTransactionDetailsByTransactionIDRIBSZ. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into GetTransactionDetailsByTransactionIDRIBS with oneOf schemas: GetTransactionDetailsByTransactionIDRIBSB, GetTransactionDetailsByTransactionIDRIBSBC, GetTransactionDetailsByTransactionIDRIBSBSC, GetTransactionDetailsByTransactionIDRIBSD, GetTransactionDetailsByTransactionIDRIBSD2, GetTransactionDetailsByTransactionIDRIBSE, GetTransactionDetailsByTransactionIDRIBSEC, GetTransactionDetailsByTransactionIDRIBSL, GetTransactionDetailsByTransactionIDRIBSZ. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

