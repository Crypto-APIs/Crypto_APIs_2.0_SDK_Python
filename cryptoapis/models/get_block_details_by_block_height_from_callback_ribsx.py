# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.  # noqa: E501

    The version of the OpenAPI document: 2021-03-20
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from cryptoapis.models.get_latest_mined_xrp_ripple_block_ri_total_coins import GetLatestMinedXRPRippleBlockRITotalCoins
from cryptoapis.models.get_latest_mined_xrp_ripple_block_ri_total_fees import GetLatestMinedXRPRippleBlockRITotalFees

class GetBlockDetailsByBlockHeightFromCallbackRIBSX(BaseModel):
    """
    XRP
    """
    total_coins: GetLatestMinedXRPRippleBlockRITotalCoins = Field(..., alias="totalCoins")
    total_fees: GetLatestMinedXRPRippleBlockRITotalFees = Field(..., alias="totalFees")
    __properties = ["totalCoins", "totalFees"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetBlockDetailsByBlockHeightFromCallbackRIBSX:
        """Create an instance of GetBlockDetailsByBlockHeightFromCallbackRIBSX from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of total_coins
        if self.total_coins:
            _dict['totalCoins'] = self.total_coins.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_fees
        if self.total_fees:
            _dict['totalFees'] = self.total_fees.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetBlockDetailsByBlockHeightFromCallbackRIBSX:
        """Create an instance of GetBlockDetailsByBlockHeightFromCallbackRIBSX from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetBlockDetailsByBlockHeightFromCallbackRIBSX.parse_obj(obj)

        _obj = GetBlockDetailsByBlockHeightFromCallbackRIBSX.parse_obj({
            "total_coins": GetLatestMinedXRPRippleBlockRITotalCoins.from_dict(obj.get("totalCoins")) if obj.get("totalCoins") is not None else None,
            "total_fees": GetLatestMinedXRPRippleBlockRITotalFees.from_dict(obj.get("totalFees")) if obj.get("totalFees") is not None else None
        })
        return _obj

