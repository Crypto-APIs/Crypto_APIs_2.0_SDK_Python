# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.  # noqa: E501

    The version of the OpenAPI document: 2021-03-20
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from cryptoapis.models.get_wallet_asset_details_ri_confirmed_balance import GetWalletAssetDetailsRIConfirmedBalance
from cryptoapis.models.get_wallet_asset_details_ri_fungible_tokens_inner import GetWalletAssetDetailsRIFungibleTokensInner
from cryptoapis.models.get_wallet_asset_details_ri_non_fungible_tokens_inner import GetWalletAssetDetailsRINonFungibleTokensInner
from cryptoapis.models.get_wallet_asset_details_ri_recieved_confirmed_amount import GetWalletAssetDetailsRIRecievedConfirmedAmount
from cryptoapis.models.get_wallet_asset_details_ri_sent_confirmed_amount import GetWalletAssetDetailsRISentConfirmedAmount

class GetWalletAssetDetailsRI(BaseModel):
    """
    GetWalletAssetDetailsRI
    """
    confirmed_balance: GetWalletAssetDetailsRIConfirmedBalance = Field(..., alias="confirmedBalance")
    deposit_addresses_count: StrictInt = Field(..., alias="depositAddressesCount", description="Specifies the count of deposit addresses in the Wallet.")
    fungible_tokens: conlist(GetWalletAssetDetailsRIFungibleTokensInner) = Field(..., alias="fungibleTokens", description="Represents fungible tokens'es detailed information")
    name: StrictStr = Field(..., description="Defines the name of the Wallet given to it by the user.")
    non_fungible_tokens: conlist(GetWalletAssetDetailsRINonFungibleTokensInner) = Field(..., alias="nonFungibleTokens", description="Represents non-fungible tokens'es detailed information.")
    recieved_confirmed_amount: GetWalletAssetDetailsRIRecievedConfirmedAmount = Field(..., alias="recievedConfirmedAmount")
    sent_confirmed_amount: GetWalletAssetDetailsRISentConfirmedAmount = Field(..., alias="sentConfirmedAmount")
    __properties = ["confirmedBalance", "depositAddressesCount", "fungibleTokens", "name", "nonFungibleTokens", "recievedConfirmedAmount", "sentConfirmedAmount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetWalletAssetDetailsRI:
        """Create an instance of GetWalletAssetDetailsRI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of confirmed_balance
        if self.confirmed_balance:
            _dict['confirmedBalance'] = self.confirmed_balance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fungible_tokens (list)
        _items = []
        if self.fungible_tokens:
            for _item in self.fungible_tokens:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fungibleTokens'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in non_fungible_tokens (list)
        _items = []
        if self.non_fungible_tokens:
            for _item in self.non_fungible_tokens:
                if _item:
                    _items.append(_item.to_dict())
            _dict['nonFungibleTokens'] = _items
        # override the default output from pydantic by calling `to_dict()` of recieved_confirmed_amount
        if self.recieved_confirmed_amount:
            _dict['recievedConfirmedAmount'] = self.recieved_confirmed_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sent_confirmed_amount
        if self.sent_confirmed_amount:
            _dict['sentConfirmedAmount'] = self.sent_confirmed_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetWalletAssetDetailsRI:
        """Create an instance of GetWalletAssetDetailsRI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetWalletAssetDetailsRI.parse_obj(obj)

        _obj = GetWalletAssetDetailsRI.parse_obj({
            "confirmed_balance": GetWalletAssetDetailsRIConfirmedBalance.from_dict(obj.get("confirmedBalance")) if obj.get("confirmedBalance") is not None else None,
            "deposit_addresses_count": obj.get("depositAddressesCount"),
            "fungible_tokens": [GetWalletAssetDetailsRIFungibleTokensInner.from_dict(_item) for _item in obj.get("fungibleTokens")] if obj.get("fungibleTokens") is not None else None,
            "name": obj.get("name"),
            "non_fungible_tokens": [GetWalletAssetDetailsRINonFungibleTokensInner.from_dict(_item) for _item in obj.get("nonFungibleTokens")] if obj.get("nonFungibleTokens") is not None else None,
            "recieved_confirmed_amount": GetWalletAssetDetailsRIRecievedConfirmedAmount.from_dict(obj.get("recievedConfirmedAmount")) if obj.get("recievedConfirmedAmount") is not None else None,
            "sent_confirmed_amount": GetWalletAssetDetailsRISentConfirmedAmount.from_dict(obj.get("sentConfirmedAmount")) if obj.get("sentConfirmedAmount") is not None else None
        })
        return _obj

