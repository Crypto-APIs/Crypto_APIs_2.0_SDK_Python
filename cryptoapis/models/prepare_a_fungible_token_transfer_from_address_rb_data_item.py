# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.  # noqa: E501

    The version of the OpenAPI document: 2021-03-20
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from cryptoapis.models.prepare_a_fungible_token_transfer_from_address_rb_data_item_fee import PrepareAFungibleTokenTransferFromAddressRBDataItemFee

class PrepareAFungibleTokenTransferFromAddressRBDataItem(BaseModel):
    """
    PrepareAFungibleTokenTransferFromAddressRBDataItem
    """
    amount: StrictStr = Field(..., description="Representation of the amount to be transferred")
    contract: StrictStr = Field(..., description="Represents the contract address of the token, which controls its logic. It is not the address that holds the tokens.")
    nonce: Optional[StrictStr] = Field(None, description="Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.")
    recipient: StrictStr = Field(..., description="The address which receives this transaction. In UTXO-based protocols like Bitcoin there could be several senders while in account-based protocols like Ethereum there is always only one recipient.")
    sender: StrictStr = Field(..., description="Represents the address which sends this transaction. In UTXO-based protocols like Bitcoin there could be several senders while in account-based protocols like Ethereum there is always only one sender.")
    fee: PrepareAFungibleTokenTransferFromAddressRBDataItemFee = Field(...)
    transaction_type: Optional[StrictStr] = Field(None, alias="transactionType", description="Representation of the transaction type. For Ethereum-Classic and Binance Smart Chain there is no need to provide \"transactionType\" in the request.")
    __properties = ["amount", "contract", "nonce", "recipient", "sender", "fee", "transactionType"]

    @validator('transaction_type')
    def transaction_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('legacy-transaction'):
            raise ValueError("must be one of enum values ('legacy-transaction')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PrepareAFungibleTokenTransferFromAddressRBDataItem:
        """Create an instance of PrepareAFungibleTokenTransferFromAddressRBDataItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of fee
        if self.fee:
            _dict['fee'] = self.fee.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PrepareAFungibleTokenTransferFromAddressRBDataItem:
        """Create an instance of PrepareAFungibleTokenTransferFromAddressRBDataItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PrepareAFungibleTokenTransferFromAddressRBDataItem.parse_obj(obj)

        _obj = PrepareAFungibleTokenTransferFromAddressRBDataItem.parse_obj({
            "amount": obj.get("amount"),
            "contract": obj.get("contract"),
            "nonce": obj.get("nonce"),
            "recipient": obj.get("recipient"),
            "sender": obj.get("sender"),
            "fee": PrepareAFungibleTokenTransferFromAddressRBDataItemFee.from_dict(obj.get("fee")) if obj.get("fee") is not None else None,
            "transaction_type": obj.get("transactionType")
        })
        return _obj

