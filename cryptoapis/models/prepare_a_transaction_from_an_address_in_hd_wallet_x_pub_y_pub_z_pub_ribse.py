# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.  # noqa: E501

    The version of the OpenAPI document: 2021-03-20
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr, validator
from cryptoapis.models.prepare_a_transaction_from_an_address_in_hd_wallet_x_pub_y_pub_z_pub_ribse_fee import PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEFee

class PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE(BaseModel):
    """
    Ethereum
    """
    data_hex: StrictStr = Field(..., alias="dataHex", description="Representation of the data in hex value")
    derivation_index: StrictInt = Field(..., alias="derivationIndex", description="Representation of the derivation index of the xpub address")
    fee: PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEFee = Field(...)
    nonce: StrictStr = Field(..., description="Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.")
    transaction_type: StrictStr = Field(..., alias="transactionType", description="Representation of the transaction type")
    unit: StrictStr = Field(..., description="Represents the unit of the amount to be sent.")
    __properties = ["dataHex", "derivationIndex", "fee", "nonce", "transactionType", "unit"]

    @validator('transaction_type')
    def transaction_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('legacy-transaction', 'access-list-transaction'):
            raise ValueError("must be one of enum values ('legacy-transaction', 'access-list-transaction')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE:
        """Create an instance of PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of fee
        if self.fee:
            _dict['fee'] = self.fee.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE:
        """Create an instance of PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE.parse_obj(obj)

        _obj = PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSE.parse_obj({
            "data_hex": obj.get("dataHex"),
            "derivation_index": obj.get("derivationIndex"),
            "fee": PrepareATransactionFromAnAddressInHDWalletXPubYPubZPubRIBSEFee.from_dict(obj.get("fee")) if obj.get("fee") is not None else None,
            "nonce": obj.get("nonce"),
            "transaction_type": obj.get("transactionType"),
            "unit": obj.get("unit")
        })
        return _obj

