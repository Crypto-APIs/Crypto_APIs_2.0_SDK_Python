# coding: utf-8

"""
    CryptoAPIs

    Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.  # noqa: E501

    The version of the OpenAPI document: 2021-03-20
    Contact: developers@cryptoapis.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictStr

from typing import Optional

from cryptoapis.models.create_coins_transaction_from_address_for_whole_amount_r import CreateCoinsTransactionFromAddressForWholeAmountR
from cryptoapis.models.create_coins_transaction_from_address_for_whole_amount_rb import CreateCoinsTransactionFromAddressForWholeAmountRB
from cryptoapis.models.create_coins_transaction_request_from_address_r import CreateCoinsTransactionRequestFromAddressR
from cryptoapis.models.create_coins_transaction_request_from_address_rb import CreateCoinsTransactionRequestFromAddressRB
from cryptoapis.models.create_coins_transaction_request_from_wallet_r import CreateCoinsTransactionRequestFromWalletR
from cryptoapis.models.create_coins_transaction_request_from_wallet_rb import CreateCoinsTransactionRequestFromWalletRB
from cryptoapis.models.create_fungible_token_transaction_request_from_address_without_fee_priority_r import CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR
from cryptoapis.models.create_fungible_token_transaction_request_from_address_without_fee_priority_rb import CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB
from cryptoapis.models.create_fungible_tokens_transaction_request_from_address_r import CreateFungibleTokensTransactionRequestFromAddressR
from cryptoapis.models.create_fungible_tokens_transaction_request_from_address_rb import CreateFungibleTokensTransactionRequestFromAddressRB
from cryptoapis.models.create_single_transaction_request_from_address_without_fee_priority_r import CreateSingleTransactionRequestFromAddressWithoutFeePriorityR
from cryptoapis.models.create_single_transaction_request_from_address_without_fee_priority_rb import CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB

from cryptoapis.api_client import ApiClient
from cryptoapis.api_response import ApiResponse
from cryptoapis.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TransactionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_coins_transaction_from_address_for_whole_amount(self, address : Annotated[StrictStr, Field(..., description="Defines the source address.")], blockchain : Annotated[StrictStr, Field(..., description="Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.")], network : Annotated[StrictStr, Field(..., description="Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks.")], wallet_id : Annotated[StrictStr, Field(..., description="Represents the sender's specific and unique Wallet ID of the sender.")], context : Annotated[Optional[StrictStr], Field(description="In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.")] = None, create_coins_transaction_from_address_for_whole_amount_rb : Optional[CreateCoinsTransactionFromAddressForWholeAmountRB] = None, **kwargs) -> CreateCoinsTransactionFromAddressForWholeAmountR:  # noqa: E501
        """Create Coins Transaction From Address For Whole Amount  # noqa: E501

        Through this endpoint customers can create a new transaction from address for **coins** specifically, which will transfer over the entire available amount.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_coins_transaction_from_address_for_whole_amount(address, blockchain, network, wallet_id, context, create_coins_transaction_from_address_for_whole_amount_rb, async_req=True)
        >>> result = thread.get()

        :param address: Defines the source address. (required)
        :type address: str
        :param blockchain: Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
        :type blockchain: str
        :param network: Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks. (required)
        :type network: str
        :param wallet_id: Represents the sender's specific and unique Wallet ID of the sender. (required)
        :type wallet_id: str
        :param context: In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
        :type context: str
        :param create_coins_transaction_from_address_for_whole_amount_rb:
        :type create_coins_transaction_from_address_for_whole_amount_rb: CreateCoinsTransactionFromAddressForWholeAmountRB
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateCoinsTransactionFromAddressForWholeAmountR
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_coins_transaction_from_address_for_whole_amount_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_coins_transaction_from_address_for_whole_amount_with_http_info(address, blockchain, network, wallet_id, context, create_coins_transaction_from_address_for_whole_amount_rb, **kwargs)  # noqa: E501

    @validate_arguments
    def create_coins_transaction_from_address_for_whole_amount_with_http_info(self, address : Annotated[StrictStr, Field(..., description="Defines the source address.")], blockchain : Annotated[StrictStr, Field(..., description="Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.")], network : Annotated[StrictStr, Field(..., description="Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks.")], wallet_id : Annotated[StrictStr, Field(..., description="Represents the sender's specific and unique Wallet ID of the sender.")], context : Annotated[Optional[StrictStr], Field(description="In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.")] = None, create_coins_transaction_from_address_for_whole_amount_rb : Optional[CreateCoinsTransactionFromAddressForWholeAmountRB] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Coins Transaction From Address For Whole Amount  # noqa: E501

        Through this endpoint customers can create a new transaction from address for **coins** specifically, which will transfer over the entire available amount.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_coins_transaction_from_address_for_whole_amount_with_http_info(address, blockchain, network, wallet_id, context, create_coins_transaction_from_address_for_whole_amount_rb, async_req=True)
        >>> result = thread.get()

        :param address: Defines the source address. (required)
        :type address: str
        :param blockchain: Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
        :type blockchain: str
        :param network: Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks. (required)
        :type network: str
        :param wallet_id: Represents the sender's specific and unique Wallet ID of the sender. (required)
        :type wallet_id: str
        :param context: In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
        :type context: str
        :param create_coins_transaction_from_address_for_whole_amount_rb:
        :type create_coins_transaction_from_address_for_whole_amount_rb: CreateCoinsTransactionFromAddressForWholeAmountRB
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateCoinsTransactionFromAddressForWholeAmountR, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'address',
            'blockchain',
            'network',
            'wallet_id',
            'context',
            'create_coins_transaction_from_address_for_whole_amount_rb'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_coins_transaction_from_address_for_whole_amount" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['address']:
            _path_params['address'] = _params['address']

        if _params['blockchain']:
            _path_params['blockchain'] = _params['blockchain']

        if _params['network']:
            _path_params['network'] = _params['network']

        if _params['wallet_id']:
            _path_params['walletId'] = _params['wallet_id']


        # process the query parameters
        _query_params = []
        if _params.get('context') is not None:  # noqa: E501
            _query_params.append(('context', _params['context']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_coins_transaction_from_address_for_whole_amount_rb'] is not None:
            _body_params = _params['create_coins_transaction_from_address_for_whole_amount_rb']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '201': "CreateCoinsTransactionFromAddressForWholeAmountR",
            '400': "object",
            '401': "object",
            '402': "object",
            '403': "object",
            '409': "object",
            '415': "object",
            '422': "object",
            '429': "object",
            '500': "object",
        }

        return self.api_client.call_api(
            '/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{address}/all-transaction-requests', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_coins_transaction_request_from_address(self, address : Annotated[StrictStr, Field(..., description="Defines the specific source address for the transaction. For XRP we also support the X-address format.")], blockchain : Annotated[StrictStr, Field(..., description="Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.")], network : Annotated[StrictStr, Field(..., description="Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks.")], wallet_id : Annotated[StrictStr, Field(..., description="Represents the sender's specific and unique Wallet ID of the sender.")], context : Annotated[Optional[StrictStr], Field(description="In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.")] = None, create_coins_transaction_request_from_address_rb : Optional[CreateCoinsTransactionRequestFromAddressRB] = None, **kwargs) -> CreateCoinsTransactionRequestFromAddressR:  # noqa: E501
        """Create Coins Transaction Request from Address  # noqa: E501

        Through this endpoint users can create a new single transaction request from one address to another.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_coins_transaction_request_from_address(address, blockchain, network, wallet_id, context, create_coins_transaction_request_from_address_rb, async_req=True)
        >>> result = thread.get()

        :param address: Defines the specific source address for the transaction. For XRP we also support the X-address format. (required)
        :type address: str
        :param blockchain: Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
        :type blockchain: str
        :param network: Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks. (required)
        :type network: str
        :param wallet_id: Represents the sender's specific and unique Wallet ID of the sender. (required)
        :type wallet_id: str
        :param context: In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
        :type context: str
        :param create_coins_transaction_request_from_address_rb:
        :type create_coins_transaction_request_from_address_rb: CreateCoinsTransactionRequestFromAddressRB
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateCoinsTransactionRequestFromAddressR
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_coins_transaction_request_from_address_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_coins_transaction_request_from_address_with_http_info(address, blockchain, network, wallet_id, context, create_coins_transaction_request_from_address_rb, **kwargs)  # noqa: E501

    @validate_arguments
    def create_coins_transaction_request_from_address_with_http_info(self, address : Annotated[StrictStr, Field(..., description="Defines the specific source address for the transaction. For XRP we also support the X-address format.")], blockchain : Annotated[StrictStr, Field(..., description="Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.")], network : Annotated[StrictStr, Field(..., description="Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks.")], wallet_id : Annotated[StrictStr, Field(..., description="Represents the sender's specific and unique Wallet ID of the sender.")], context : Annotated[Optional[StrictStr], Field(description="In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.")] = None, create_coins_transaction_request_from_address_rb : Optional[CreateCoinsTransactionRequestFromAddressRB] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Coins Transaction Request from Address  # noqa: E501

        Through this endpoint users can create a new single transaction request from one address to another.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_coins_transaction_request_from_address_with_http_info(address, blockchain, network, wallet_id, context, create_coins_transaction_request_from_address_rb, async_req=True)
        >>> result = thread.get()

        :param address: Defines the specific source address for the transaction. For XRP we also support the X-address format. (required)
        :type address: str
        :param blockchain: Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
        :type blockchain: str
        :param network: Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks. (required)
        :type network: str
        :param wallet_id: Represents the sender's specific and unique Wallet ID of the sender. (required)
        :type wallet_id: str
        :param context: In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
        :type context: str
        :param create_coins_transaction_request_from_address_rb:
        :type create_coins_transaction_request_from_address_rb: CreateCoinsTransactionRequestFromAddressRB
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateCoinsTransactionRequestFromAddressR, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'address',
            'blockchain',
            'network',
            'wallet_id',
            'context',
            'create_coins_transaction_request_from_address_rb'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_coins_transaction_request_from_address" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['address']:
            _path_params['address'] = _params['address']

        if _params['blockchain']:
            _path_params['blockchain'] = _params['blockchain']

        if _params['network']:
            _path_params['network'] = _params['network']

        if _params['wallet_id']:
            _path_params['walletId'] = _params['wallet_id']


        # process the query parameters
        _query_params = []
        if _params.get('context') is not None:  # noqa: E501
            _query_params.append(('context', _params['context']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_coins_transaction_request_from_address_rb'] is not None:
            _body_params = _params['create_coins_transaction_request_from_address_rb']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '201': "CreateCoinsTransactionRequestFromAddressR",
            '400': "object",
            '401': "object",
            '402': "object",
            '403': "object",
            '409': "object",
            '415': "object",
            '422': "object",
            '429': "object",
            '500': "object",
        }

        return self.api_client.call_api(
            '/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{address}/transaction-requests', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_coins_transaction_request_from_wallet(self, blockchain : Annotated[StrictStr, Field(..., description="Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.")], network : Annotated[StrictStr, Field(..., description="Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks.")], wallet_id : Annotated[StrictStr, Field(..., description="Represents the sender's specific and unique Wallet ID of the sender.")], context : Annotated[Optional[StrictStr], Field(description="In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.")] = None, create_coins_transaction_request_from_wallet_rb : Optional[CreateCoinsTransactionRequestFromWalletRB] = None, **kwargs) -> CreateCoinsTransactionRequestFromWalletR:  # noqa: E501
        """Create Coins Transaction Request from Wallet  # noqa: E501

        Through this endpoint users can create a new transaction request from the entire Wallet instead from just a specific address. This endpoint can generate transactions from multiple to multiple addresses.    {warning}This is available **only** for UTXO-based protocols such as Bitcoin, Bitcoin Cash, Litecoin, etc. It **is not** available for Account-based protocols like Ethereum.{/warning}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_coins_transaction_request_from_wallet(blockchain, network, wallet_id, context, create_coins_transaction_request_from_wallet_rb, async_req=True)
        >>> result = thread.get()

        :param blockchain: Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
        :type blockchain: str
        :param network: Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks. (required)
        :type network: str
        :param wallet_id: Represents the sender's specific and unique Wallet ID of the sender. (required)
        :type wallet_id: str
        :param context: In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
        :type context: str
        :param create_coins_transaction_request_from_wallet_rb:
        :type create_coins_transaction_request_from_wallet_rb: CreateCoinsTransactionRequestFromWalletRB
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateCoinsTransactionRequestFromWalletR
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_coins_transaction_request_from_wallet_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_coins_transaction_request_from_wallet_with_http_info(blockchain, network, wallet_id, context, create_coins_transaction_request_from_wallet_rb, **kwargs)  # noqa: E501

    @validate_arguments
    def create_coins_transaction_request_from_wallet_with_http_info(self, blockchain : Annotated[StrictStr, Field(..., description="Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.")], network : Annotated[StrictStr, Field(..., description="Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks.")], wallet_id : Annotated[StrictStr, Field(..., description="Represents the sender's specific and unique Wallet ID of the sender.")], context : Annotated[Optional[StrictStr], Field(description="In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.")] = None, create_coins_transaction_request_from_wallet_rb : Optional[CreateCoinsTransactionRequestFromWalletRB] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Coins Transaction Request from Wallet  # noqa: E501

        Through this endpoint users can create a new transaction request from the entire Wallet instead from just a specific address. This endpoint can generate transactions from multiple to multiple addresses.    {warning}This is available **only** for UTXO-based protocols such as Bitcoin, Bitcoin Cash, Litecoin, etc. It **is not** available for Account-based protocols like Ethereum.{/warning}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_coins_transaction_request_from_wallet_with_http_info(blockchain, network, wallet_id, context, create_coins_transaction_request_from_wallet_rb, async_req=True)
        >>> result = thread.get()

        :param blockchain: Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
        :type blockchain: str
        :param network: Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks. (required)
        :type network: str
        :param wallet_id: Represents the sender's specific and unique Wallet ID of the sender. (required)
        :type wallet_id: str
        :param context: In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
        :type context: str
        :param create_coins_transaction_request_from_wallet_rb:
        :type create_coins_transaction_request_from_wallet_rb: CreateCoinsTransactionRequestFromWalletRB
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateCoinsTransactionRequestFromWalletR, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'blockchain',
            'network',
            'wallet_id',
            'context',
            'create_coins_transaction_request_from_wallet_rb'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_coins_transaction_request_from_wallet" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['blockchain']:
            _path_params['blockchain'] = _params['blockchain']

        if _params['network']:
            _path_params['network'] = _params['network']

        if _params['wallet_id']:
            _path_params['walletId'] = _params['wallet_id']


        # process the query parameters
        _query_params = []
        if _params.get('context') is not None:  # noqa: E501
            _query_params.append(('context', _params['context']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_coins_transaction_request_from_wallet_rb'] is not None:
            _body_params = _params['create_coins_transaction_request_from_wallet_rb']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '201': "CreateCoinsTransactionRequestFromWalletR",
            '400': "object",
            '401': "object",
            '402': "object",
            '403': "object",
            '409': "object",
            '415': "object",
            '422': "object",
            '429': "object",
            '500': "object",
        }

        return self.api_client.call_api(
            '/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/transaction-requests', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_fungible_token_transaction_request_from_address_without_fee_priority(self, blockchain : Annotated[StrictStr, Field(..., description="Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.")], network : Annotated[StrictStr, Field(..., description="Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks.")], sender_address : Annotated[StrictStr, Field(..., description="Defines the specific source address for the transaction.")], wallet_id : Annotated[StrictStr, Field(..., description="Defines the unique ID of the Wallet.")], context : Annotated[Optional[StrictStr], Field(description="In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.")] = None, create_fungible_token_transaction_request_from_address_without_fee_priority_rb : Optional[CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB] = None, **kwargs) -> CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR:  # noqa: E501
        """Create Fungible Token Transaction Request From Address Without Fee Priority  # noqa: E501

        Through this endpoint customers can make a single feeless token transaction on the Tron blockchain protocol. TRX transactions burn certain resources called Bandwidth and Energy. Each account has 1500 bandwidth free for use every 24 hours and more can be obtained by staking TRX. The unit price of Energy is 280 SUN and of bandwidth - 1000 SUN. If the resources are insufficient, TRX will be burned to pay for them.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_fungible_token_transaction_request_from_address_without_fee_priority(blockchain, network, sender_address, wallet_id, context, create_fungible_token_transaction_request_from_address_without_fee_priority_rb, async_req=True)
        >>> result = thread.get()

        :param blockchain: Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
        :type blockchain: str
        :param network: Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks. (required)
        :type network: str
        :param sender_address: Defines the specific source address for the transaction. (required)
        :type sender_address: str
        :param wallet_id: Defines the unique ID of the Wallet. (required)
        :type wallet_id: str
        :param context: In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
        :type context: str
        :param create_fungible_token_transaction_request_from_address_without_fee_priority_rb:
        :type create_fungible_token_transaction_request_from_address_without_fee_priority_rb: CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_fungible_token_transaction_request_from_address_without_fee_priority_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_fungible_token_transaction_request_from_address_without_fee_priority_with_http_info(blockchain, network, sender_address, wallet_id, context, create_fungible_token_transaction_request_from_address_without_fee_priority_rb, **kwargs)  # noqa: E501

    @validate_arguments
    def create_fungible_token_transaction_request_from_address_without_fee_priority_with_http_info(self, blockchain : Annotated[StrictStr, Field(..., description="Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.")], network : Annotated[StrictStr, Field(..., description="Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks.")], sender_address : Annotated[StrictStr, Field(..., description="Defines the specific source address for the transaction.")], wallet_id : Annotated[StrictStr, Field(..., description="Defines the unique ID of the Wallet.")], context : Annotated[Optional[StrictStr], Field(description="In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.")] = None, create_fungible_token_transaction_request_from_address_without_fee_priority_rb : Optional[CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Fungible Token Transaction Request From Address Without Fee Priority  # noqa: E501

        Through this endpoint customers can make a single feeless token transaction on the Tron blockchain protocol. TRX transactions burn certain resources called Bandwidth and Energy. Each account has 1500 bandwidth free for use every 24 hours and more can be obtained by staking TRX. The unit price of Energy is 280 SUN and of bandwidth - 1000 SUN. If the resources are insufficient, TRX will be burned to pay for them.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_fungible_token_transaction_request_from_address_without_fee_priority_with_http_info(blockchain, network, sender_address, wallet_id, context, create_fungible_token_transaction_request_from_address_without_fee_priority_rb, async_req=True)
        >>> result = thread.get()

        :param blockchain: Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
        :type blockchain: str
        :param network: Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks. (required)
        :type network: str
        :param sender_address: Defines the specific source address for the transaction. (required)
        :type sender_address: str
        :param wallet_id: Defines the unique ID of the Wallet. (required)
        :type wallet_id: str
        :param context: In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
        :type context: str
        :param create_fungible_token_transaction_request_from_address_without_fee_priority_rb:
        :type create_fungible_token_transaction_request_from_address_without_fee_priority_rb: CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityRB
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'blockchain',
            'network',
            'sender_address',
            'wallet_id',
            'context',
            'create_fungible_token_transaction_request_from_address_without_fee_priority_rb'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_fungible_token_transaction_request_from_address_without_fee_priority" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['blockchain']:
            _path_params['blockchain'] = _params['blockchain']

        if _params['network']:
            _path_params['network'] = _params['network']

        if _params['sender_address']:
            _path_params['senderAddress'] = _params['sender_address']

        if _params['wallet_id']:
            _path_params['walletId'] = _params['wallet_id']


        # process the query parameters
        _query_params = []
        if _params.get('context') is not None:  # noqa: E501
            _query_params.append(('context', _params['context']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_fungible_token_transaction_request_from_address_without_fee_priority_rb'] is not None:
            _body_params = _params['create_fungible_token_transaction_request_from_address_without_fee_priority_rb']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '201': "CreateFungibleTokenTransactionRequestFromAddressWithoutFeePriorityR",
            '400': "object",
            '401': "object",
            '402': "object",
            '403': "object",
            '409': "object",
            '415': "object",
            '422': "object",
            '429': "object",
            '500': "object",
        }

        return self.api_client.call_api(
            '/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{senderAddress}/feeless-token-transaction-requests', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_fungible_tokens_transaction_request_from_address(self, blockchain : Annotated[StrictStr, Field(..., description="Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.")], network : Annotated[StrictStr, Field(..., description="Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks.")], sender_address : Annotated[StrictStr, Field(..., description="Defines the specific source address for the transaction.")], wallet_id : Annotated[StrictStr, Field(..., description="Defines the unique ID of the Wallet.")], context : Annotated[Optional[StrictStr], Field(description="In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.")] = None, create_fungible_tokens_transaction_request_from_address_rb : Optional[CreateFungibleTokensTransactionRequestFromAddressRB] = None, **kwargs) -> CreateFungibleTokensTransactionRequestFromAddressR:  # noqa: E501
        """Create Fungible Tokens Transaction Request from Address  # noqa: E501

        Through this endpoint users can make a single token transaction.    {note}To have an operational callback subscription, you need to first verify a domain for the Callback URL. Please see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}    {warning}Crypto APIs will notify the user **only when** the event occurs. There are cases when the specific event doesn't happen at all, or takes a long time to do so. A callback notification **will not** be sent if the event does not or cannot occur, or will take long time to occur.{/warning}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_fungible_tokens_transaction_request_from_address(blockchain, network, sender_address, wallet_id, context, create_fungible_tokens_transaction_request_from_address_rb, async_req=True)
        >>> result = thread.get()

        :param blockchain: Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
        :type blockchain: str
        :param network: Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks. (required)
        :type network: str
        :param sender_address: Defines the specific source address for the transaction. (required)
        :type sender_address: str
        :param wallet_id: Defines the unique ID of the Wallet. (required)
        :type wallet_id: str
        :param context: In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
        :type context: str
        :param create_fungible_tokens_transaction_request_from_address_rb:
        :type create_fungible_tokens_transaction_request_from_address_rb: CreateFungibleTokensTransactionRequestFromAddressRB
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateFungibleTokensTransactionRequestFromAddressR
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_fungible_tokens_transaction_request_from_address_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_fungible_tokens_transaction_request_from_address_with_http_info(blockchain, network, sender_address, wallet_id, context, create_fungible_tokens_transaction_request_from_address_rb, **kwargs)  # noqa: E501

    @validate_arguments
    def create_fungible_tokens_transaction_request_from_address_with_http_info(self, blockchain : Annotated[StrictStr, Field(..., description="Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.")], network : Annotated[StrictStr, Field(..., description="Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks.")], sender_address : Annotated[StrictStr, Field(..., description="Defines the specific source address for the transaction.")], wallet_id : Annotated[StrictStr, Field(..., description="Defines the unique ID of the Wallet.")], context : Annotated[Optional[StrictStr], Field(description="In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.")] = None, create_fungible_tokens_transaction_request_from_address_rb : Optional[CreateFungibleTokensTransactionRequestFromAddressRB] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Fungible Tokens Transaction Request from Address  # noqa: E501

        Through this endpoint users can make a single token transaction.    {note}To have an operational callback subscription, you need to first verify a domain for the Callback URL. Please see more information on Callbacks [here](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-url).{/note}    {warning}Crypto APIs will notify the user **only when** the event occurs. There are cases when the specific event doesn't happen at all, or takes a long time to do so. A callback notification **will not** be sent if the event does not or cannot occur, or will take long time to occur.{/warning}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_fungible_tokens_transaction_request_from_address_with_http_info(blockchain, network, sender_address, wallet_id, context, create_fungible_tokens_transaction_request_from_address_rb, async_req=True)
        >>> result = thread.get()

        :param blockchain: Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
        :type blockchain: str
        :param network: Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks. (required)
        :type network: str
        :param sender_address: Defines the specific source address for the transaction. (required)
        :type sender_address: str
        :param wallet_id: Defines the unique ID of the Wallet. (required)
        :type wallet_id: str
        :param context: In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
        :type context: str
        :param create_fungible_tokens_transaction_request_from_address_rb:
        :type create_fungible_tokens_transaction_request_from_address_rb: CreateFungibleTokensTransactionRequestFromAddressRB
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateFungibleTokensTransactionRequestFromAddressR, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'blockchain',
            'network',
            'sender_address',
            'wallet_id',
            'context',
            'create_fungible_tokens_transaction_request_from_address_rb'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_fungible_tokens_transaction_request_from_address" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['blockchain']:
            _path_params['blockchain'] = _params['blockchain']

        if _params['network']:
            _path_params['network'] = _params['network']

        if _params['sender_address']:
            _path_params['senderAddress'] = _params['sender_address']

        if _params['wallet_id']:
            _path_params['walletId'] = _params['wallet_id']


        # process the query parameters
        _query_params = []
        if _params.get('context') is not None:  # noqa: E501
            _query_params.append(('context', _params['context']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_fungible_tokens_transaction_request_from_address_rb'] is not None:
            _body_params = _params['create_fungible_tokens_transaction_request_from_address_rb']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '201': "CreateFungibleTokensTransactionRequestFromAddressR",
            '400': "object",
            '401': "object",
            '402': "object",
            '403': "object",
            '409': "object",
            '415': "object",
            '422': "object",
            '429': "object",
            '500': "object",
        }

        return self.api_client.call_api(
            '/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{senderAddress}/token-transaction-requests', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_single_transaction_request_from_address_without_fee_priority(self, address : Annotated[StrictStr, Field(..., description="Defines the specific source address for the transaction.")], blockchain : Annotated[StrictStr, Field(..., description="Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.")], network : Annotated[StrictStr, Field(..., description="Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks.")], wallet_id : Annotated[StrictStr, Field(..., description="Represents the sender's specific and unique Wallet ID of the sender.")], context : Annotated[Optional[StrictStr], Field(description="In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.")] = None, create_single_transaction_request_from_address_without_fee_priority_rb : Optional[CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB] = None, **kwargs) -> CreateSingleTransactionRequestFromAddressWithoutFeePriorityR:  # noqa: E501
        """Create Single Transaction Request From Address Without Fee Priority  # noqa: E501

        Through this endpoint users can create a new single transaction request from one address to another. The difference between this endpoint and \"Create Coins Transaction Request from Address\"  is that for Tron blockchain there is no Fee Priority that defines how fast a transaction can be mined.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_single_transaction_request_from_address_without_fee_priority(address, blockchain, network, wallet_id, context, create_single_transaction_request_from_address_without_fee_priority_rb, async_req=True)
        >>> result = thread.get()

        :param address: Defines the specific source address for the transaction. (required)
        :type address: str
        :param blockchain: Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
        :type blockchain: str
        :param network: Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks. (required)
        :type network: str
        :param wallet_id: Represents the sender's specific and unique Wallet ID of the sender. (required)
        :type wallet_id: str
        :param context: In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
        :type context: str
        :param create_single_transaction_request_from_address_without_fee_priority_rb:
        :type create_single_transaction_request_from_address_without_fee_priority_rb: CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateSingleTransactionRequestFromAddressWithoutFeePriorityR
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_single_transaction_request_from_address_without_fee_priority_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_single_transaction_request_from_address_without_fee_priority_with_http_info(address, blockchain, network, wallet_id, context, create_single_transaction_request_from_address_without_fee_priority_rb, **kwargs)  # noqa: E501

    @validate_arguments
    def create_single_transaction_request_from_address_without_fee_priority_with_http_info(self, address : Annotated[StrictStr, Field(..., description="Defines the specific source address for the transaction.")], blockchain : Annotated[StrictStr, Field(..., description="Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc.")], network : Annotated[StrictStr, Field(..., description="Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks.")], wallet_id : Annotated[StrictStr, Field(..., description="Represents the sender's specific and unique Wallet ID of the sender.")], context : Annotated[Optional[StrictStr], Field(description="In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.")] = None, create_single_transaction_request_from_address_without_fee_priority_rb : Optional[CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Single Transaction Request From Address Without Fee Priority  # noqa: E501

        Through this endpoint users can create a new single transaction request from one address to another. The difference between this endpoint and \"Create Coins Transaction Request from Address\"  is that for Tron blockchain there is no Fee Priority that defines how fast a transaction can be mined.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_single_transaction_request_from_address_without_fee_priority_with_http_info(address, blockchain, network, wallet_id, context, create_single_transaction_request_from_address_without_fee_priority_rb, async_req=True)
        >>> result = thread.get()

        :param address: Defines the specific source address for the transaction. (required)
        :type address: str
        :param blockchain: Represents the specific blockchain protocol name, e.g. Ethereum, Bitcoin, etc. (required)
        :type blockchain: str
        :param network: Represents the name of the blockchain network used; blockchain networks are usually identical as technology and software, but they differ in data, e.g. - \"mainnet\" is the live network with actual data while networks like \"testnet\", \"goerli\" are test networks. (required)
        :type network: str
        :param wallet_id: Represents the sender's specific and unique Wallet ID of the sender. (required)
        :type wallet_id: str
        :param context: In batch situations the user can use the context to correlate responses with requests. This property is present regardless of whether the response was successful or returned as an error. `context` is specified by the user.
        :type context: str
        :param create_single_transaction_request_from_address_without_fee_priority_rb:
        :type create_single_transaction_request_from_address_without_fee_priority_rb: CreateSingleTransactionRequestFromAddressWithoutFeePriorityRB
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateSingleTransactionRequestFromAddressWithoutFeePriorityR, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'address',
            'blockchain',
            'network',
            'wallet_id',
            'context',
            'create_single_transaction_request_from_address_without_fee_priority_rb'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_single_transaction_request_from_address_without_fee_priority" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['address']:
            _path_params['address'] = _params['address']

        if _params['blockchain']:
            _path_params['blockchain'] = _params['blockchain']

        if _params['network']:
            _path_params['network'] = _params['network']

        if _params['wallet_id']:
            _path_params['walletId'] = _params['wallet_id']


        # process the query parameters
        _query_params = []
        if _params.get('context') is not None:  # noqa: E501
            _query_params.append(('context', _params['context']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_single_transaction_request_from_address_without_fee_priority_rb'] is not None:
            _body_params = _params['create_single_transaction_request_from_address_without_fee_priority_rb']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKey']  # noqa: E501

        _response_types_map = {
            '201': "CreateSingleTransactionRequestFromAddressWithoutFeePriorityR",
            '400': "object",
            '401': "object",
            '402': "object",
            '403': "object",
            '409': "object",
            '415': "object",
            '422': "object",
            '429': "object",
            '500': "object",
        }

        return self.api_client.call_api(
            '/wallet-as-a-service/wallets/{walletId}/{blockchain}/{network}/addresses/{address}/feeless-transaction-requests', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
