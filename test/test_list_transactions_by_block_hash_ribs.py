"""
    CryptoAPIs

    Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: developers@cryptoapis.io
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest

import cryptoapis
from cryptoapis.model.get_transaction_details_by_transaction_idribsz_vout import GetTransactionDetailsByTransactionIDRIBSZVout
from cryptoapis.model.get_transaction_details_by_transaction_idribszv_shielded_output import GetTransactionDetailsByTransactionIDRIBSZVShieldedOutput
from cryptoapis.model.get_transaction_details_by_transaction_idribszv_shielded_spend import GetTransactionDetailsByTransactionIDRIBSZVShieldedSpend
from cryptoapis.model.list_transactions_by_block_hash_ribsb import ListTransactionsByBlockHashRIBSB
from cryptoapis.model.list_transactions_by_block_hash_ribsbc import ListTransactionsByBlockHashRIBSBC
from cryptoapis.model.list_transactions_by_block_hash_ribsbsc import ListTransactionsByBlockHashRIBSBSC
from cryptoapis.model.list_transactions_by_block_hash_ribsbsc_gas_price import ListTransactionsByBlockHashRIBSBSCGasPrice
from cryptoapis.model.list_transactions_by_block_hash_ribsd import ListTransactionsByBlockHashRIBSD
from cryptoapis.model.list_transactions_by_block_hash_ribsd2 import ListTransactionsByBlockHashRIBSD2
from cryptoapis.model.list_transactions_by_block_hash_ribse import ListTransactionsByBlockHashRIBSE
from cryptoapis.model.list_transactions_by_block_hash_ribsec import ListTransactionsByBlockHashRIBSEC
from cryptoapis.model.list_transactions_by_block_hash_ribsl import ListTransactionsByBlockHashRIBSL
from cryptoapis.model.list_transactions_by_block_hash_ribsz import ListTransactionsByBlockHashRIBSZ
from cryptoapis.model.list_transactions_by_block_hash_ribsz_vin import ListTransactionsByBlockHashRIBSZVin
from cryptoapis.model.list_transactions_by_block_hash_ribszv_join_split import ListTransactionsByBlockHashRIBSZVJoinSplit
globals()['GetTransactionDetailsByTransactionIDRIBSZVShieldedOutput'] = GetTransactionDetailsByTransactionIDRIBSZVShieldedOutput
globals()['GetTransactionDetailsByTransactionIDRIBSZVShieldedSpend'] = GetTransactionDetailsByTransactionIDRIBSZVShieldedSpend
globals()['GetTransactionDetailsByTransactionIDRIBSZVout'] = GetTransactionDetailsByTransactionIDRIBSZVout
globals()['ListTransactionsByBlockHashRIBSB'] = ListTransactionsByBlockHashRIBSB
globals()['ListTransactionsByBlockHashRIBSBC'] = ListTransactionsByBlockHashRIBSBC
globals()['ListTransactionsByBlockHashRIBSBSC'] = ListTransactionsByBlockHashRIBSBSC
globals()['ListTransactionsByBlockHashRIBSBSCGasPrice'] = ListTransactionsByBlockHashRIBSBSCGasPrice
globals()['ListTransactionsByBlockHashRIBSD'] = ListTransactionsByBlockHashRIBSD
globals()['ListTransactionsByBlockHashRIBSD2'] = ListTransactionsByBlockHashRIBSD2
globals()['ListTransactionsByBlockHashRIBSE'] = ListTransactionsByBlockHashRIBSE
globals()['ListTransactionsByBlockHashRIBSEC'] = ListTransactionsByBlockHashRIBSEC
globals()['ListTransactionsByBlockHashRIBSL'] = ListTransactionsByBlockHashRIBSL
globals()['ListTransactionsByBlockHashRIBSZ'] = ListTransactionsByBlockHashRIBSZ
globals()['ListTransactionsByBlockHashRIBSZVJoinSplit'] = ListTransactionsByBlockHashRIBSZVJoinSplit
globals()['ListTransactionsByBlockHashRIBSZVin'] = ListTransactionsByBlockHashRIBSZVin
from cryptoapis.model.list_transactions_by_block_hash_ribs import ListTransactionsByBlockHashRIBS


class TestListTransactionsByBlockHashRIBS(unittest.TestCase):
    """ListTransactionsByBlockHashRIBS unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testListTransactionsByBlockHashRIBS(self):
        """Test ListTransactionsByBlockHashRIBS"""
        # FIXME: construct object with mandatory attributes with example values
        # model = ListTransactionsByBlockHashRIBS()  # noqa: E501
        pass


if __name__ == '__main__':
    unittest.main()
